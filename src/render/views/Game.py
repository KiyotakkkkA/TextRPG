from src.render.core import Screen, ConsoleHelper, Keys, Color
from src.render.ui import Panel, Label, MenuItem, Menu, FlexPanel, RichText, ProgressBar

class GameScreen(Screen):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω.
    """
    def __init__(self, engine):
        super().__init__(engine)
        self.game_system = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.layout = None
        self.location_title = None
        self.description_text = None
        self.resources_text = None
        self.actions_menu = None
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.location_changed = True
        self.actions_changed = True
        
        self.show_global_map = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤
        self.map_initialized = False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–∞ –ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        
        self.setup_ui()
        self._fix_flex_panel()  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ set_content –∫ FlexPanel
    
    def set_game_system(self, game_system):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.
        
        Args:
            game_system: –≠–∫–∑–µ–º–ø–ª—è—Ä GameSystem
        """
        self.game_system = game_system
        self.update_location_info()
        self.update_actions()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã
        if self.game_system.get_current_location():
            self._draw_location_map(self.game_system.get_current_location())
    
    def setup_ui(self):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.children = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        width, height = ConsoleHelper.get_terminal_size()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        background = Panel(0, 0, width, height, "", False, "", Color.BG_BLACK)
        self.add_child(background)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
        sidebar_width = min(40, width // 3)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        top_panel_height = 3  # –í—ã—Å–æ—Ç–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞
        sidebar_panel = Panel(
            0, 0, 
            sidebar_width, height,
            "–ù–ê–í–ò–ì–ê–¶–ò–Ø", True, Color.BRIGHT_BLUE, "", Color.BRIGHT_WHITE
        )
        self.add_child(sidebar_panel)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏
        top_panel = Panel(
            sidebar_width, 0, 
            width - sidebar_width, top_panel_height,
            "–õ–û–ö–ê–¶–ò–Ø –ò –†–ï–ì–ò–û–ù", True, Color.BRIGHT_BLUE, "", Color.BRIGHT_WHITE
        )
        self.add_child(top_panel)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –≤ –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
        self.location_title = Label(sidebar_width + 4, 1, "–ó–∞–≥—Ä—É–∑–∫–∞...", Color.BRIGHT_WHITE)
        self.add_child(self.location_title)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ
        self.region_info = Label(sidebar_width + 4, 2, "", Color.BRIGHT_CYAN)
        self.add_child(self.region_info)
        
        # –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        main_content_width = width - sidebar_width - 2
        main_content_height = height - top_panel_height - 3  # -3 –¥–ª—è –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏
        
        content_panel = Panel(
            sidebar_width + 1, top_panel_height + 1, 
            main_content_width, main_content_height,
            "", True, Color.BRIGHT_BLACK, "", Color.BRIGHT_WHITE
        )
        self.add_child(content_panel)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.tabs = ["–û–ø–∏—Å–∞–Ω–∏–µ", "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏", "–ö–∞—Ä—Ç–∞"]
        self.tab_keys = [49, 50, 51]  # –ö–æ–¥—ã –∫–ª–∞–≤–∏—à '1', '2', '3' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.current_tab = 0
        
        # –†–∏—Å—É–µ–º –≤–∫–ª–∞–¥–∫–∏
        tab_width = main_content_width // len(self.tabs)
        self.tab_labels = []
        for i, tab in enumerate(self.tabs):
            tab_color = Color.BRIGHT_WHITE if i == self.current_tab else Color.WHITE
            tab_bg = Color.BG_BLUE if i == self.current_tab else ""
            tab_x = sidebar_width + 1 + (i * tab_width)
            # –°–º–µ—â–∞–µ–º –º–µ—Ç–∫—É –≤–∫–ª–∞–¥–∫–∏ –Ω–∞ 1 –≤–Ω–∏–∑, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–∞ –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≥–æ—Ä—è—á–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            tab_label = Label(tab_x + 2, top_panel_height + 1, f"{i+1}. {tab}", tab_color, tab_bg)
            self.tab_labels.append(tab_label)
            self.add_child(tab_label)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
        description_x = sidebar_width + 3
        description_y = top_panel_height + 3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–¥ –≤–∫–ª–∞–¥–∫–∞–º–∏
        description_width = main_content_width - 4
        description_height = main_content_height - 4  # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        
        self.description_text = RichText(
            description_x, description_y, 
            description_width, description_height, 
            Color.WHITE
        )
        self.add_child(self.description_text)
        
        # –ü–∞–Ω–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (—Å–∫—Ä—ã—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ)
        self.characters_text = RichText(
            description_x, description_y, 
            description_width, description_height, 
            Color.WHITE
        )
        self.characters_text.visible = False
        self.add_child(self.characters_text)
        
        # –ü–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã (—Å–∫—Ä—ã—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ)
        self.map_panel = FlexPanel(
            description_x, description_y, 
            description_width, description_height,
            "double", "", 1
        )
        self.map_panel.visible = False
        self.add_child(self.map_panel)
        
        # –ù–∏–∂–Ω—è—è —Å—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å
        status_panel = Panel(
            sidebar_width + 1, height - 3,  # –°–º–µ—â–∞–µ–º –Ω–∞ 1 –≤–≤–µ—Ä—Ö 
            main_content_width, 3,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
            "", True, Color.BRIGHT_BLACK, "", Color.BRIGHT_WHITE
        )
        self.add_child(status_panel)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        hint_text = "‚Üë/‚Üì: –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è | Tab: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ | Enter: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å | Esc: –ù–∞–∑–∞–¥"
        # –ü–æ–¥–Ω–∏–º–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤–Ω—É—Ç—Ä–∏ –ø–∞–Ω–µ–ª–∏
        hint_label = Label(sidebar_width + 3, height - 2, hint_text, Color.BRIGHT_BLACK)
        self.add_child(hint_label)
        
        # ---- –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ ----
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        resources_label = Label(2, 4, "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:", Color.YELLOW)
        self.add_child(resources_label)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å —á–µ—Ç–∫–∏–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        # –ù–∞—á–∞–ª—å–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.resources_min_height = 5
        self.resources_panel_height = self.resources_min_height
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Ä–µ—Å—É—Ä—Å–æ–≤, –≤—ã—Å–æ—Ç–∞ –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
        self.resources_panel = Panel(
            2, 5, 
            sidebar_width - 4, self.resources_panel_height,
            "", True, Color.BRIGHT_BLACK, "", Color.BRIGHT_WHITE
        )
        self.add_child(self.resources_panel)
        
        # RichText –≤–Ω—É—Ç—Ä–∏ –ø–∞–Ω–µ–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.resources_text = RichText(
            4, 6, 
            sidebar_width - 8, self.resources_panel_height - 2, 
            Color.GREEN
        )
        self.add_child(self.resources_text)
        
        # –ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã—Å–æ—Ç—ã –ø–∞–Ω–µ–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.actions_base_y = 6 + self.resources_panel_height
        actions_label = Label(2, self.actions_base_y, "‚öîÔ∏è –î–µ–π—Å—Ç–≤–∏—è:", Color.YELLOW)
        self.actions_label = actions_label
        self.add_child(actions_label)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_min_height = 5
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π (–±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è)
        self.actions_panel_height = self.actions_min_height
        self.actions_panel = Panel(
            2, self.actions_base_y + 1, 
            sidebar_width - 4, self.actions_panel_height,
            "", True, Color.BRIGHT_BLACK, "", Color.BRIGHT_WHITE
        )
        self.add_child(self.actions_panel)
        
        # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω—É—Ç—Ä–∏ –ø–∞–Ω–µ–ª–∏
        self.actions_menu = Menu(
            4, self.actions_base_y + 2, 
            sidebar_width - 8, [],
            "", False,
            Color.WHITE, Color.BRIGHT_WHITE,
            Color.BRIGHT_BLACK, "",
            "", Color.BRIGHT_WHITE
        )
        self.add_child(self.actions_menu)
        
        # –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ - –µ–≥–æ –ø–æ–∑–∏—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –≤—ã—Å–æ—Ç—ã –ø–∞–Ω–µ–ª–µ–π —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–π
        # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
        self.player_status_base_y = self.actions_base_y + self.actions_panel_height + 2
        
        player_status_label = Label(2, self.player_status_base_y, "üë§ –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞:", Color.BRIGHT_MAGENTA)
        self.player_status_label = player_status_label
        self.add_child(player_status_label)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
        status_panel_height = 7
        self.player_status_panel = Panel(
            2, self.player_status_base_y + 1, 
            sidebar_width - 4, status_panel_height,
            "", True, Color.BRIGHT_BLACK, "", Color.BRIGHT_WHITE
        )
        self.add_child(self.player_status_panel)
        
        # –ó–¥–æ—Ä–æ–≤—å–µ
        self.health_label = Label(4, self.player_status_base_y + 2, "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ:", Color.BRIGHT_RED)
        self.add_child(self.health_label)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞, —á—Ç–æ–±—ã –ª—É—á—à–µ –≤–º–µ—Å—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        health_bar_width = sidebar_width - 22
        self.health_bar = ProgressBar(
            23, self.player_status_base_y + 2, health_bar_width, 
            100, 100, Color.RED, Color.BLACK, True, Color.RED, False
        )
        self.add_child(self.health_bar)
        
        # –≠–Ω–µ—Ä–≥–∏—è
        self.energy_label = Label(4, self.player_status_base_y + 3, "‚ö° –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:", Color.BRIGHT_GREEN)
        self.add_child(self.energy_label)
        
        self.energy_bar = ProgressBar(
            23, self.player_status_base_y + 3, health_bar_width, 
            100, 100, Color.BRIGHT_GREEN, Color.BLACK, True, Color.BRIGHT_GREEN, False
        )
        self.add_child(self.energy_bar)
        
        # –ú–∞–Ω–∞
        self.mana_label = Label(4, self.player_status_base_y + 4, "üíô –ú–∞–Ω–∞:", Color.BRIGHT_BLUE)
        self.add_child(self.mana_label)
        
        self.mana_bar = ProgressBar(
            23, self.player_status_base_y + 4, health_bar_width, 
            100, 100, Color.BRIGHT_BLUE, Color.BLACK, True, Color.BRIGHT_BLUE, False
        )
        self.add_child(self.mana_bar)
        
        # –û–ø—ã—Ç
        self.exp_label = Label(4, self.player_status_base_y + 5, "‚ú® –û–ø—ã—Ç:", Color.BRIGHT_YELLOW)
        self.add_child(self.exp_label)
        
        self.exp_bar = ProgressBar(
            23, self.player_status_base_y + 5, health_bar_width, 
            0, 100, Color.BRIGHT_YELLOW, Color.BLACK, True, Color.BRIGHT_YELLOW, False
        )
        self.add_child(self.exp_bar)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        self.switch_tab(0, force=True)
    
    def _update_ui_positions(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã—Å–æ—Ç—ã –ø–∞–Ω–µ–ª–µ–π.
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–µ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_base_y = 6 + self.resources_panel_height
        self.actions_label.y = self.actions_base_y
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_panel.y = self.actions_base_y + 1
        self.actions_menu.y = self.actions_base_y + 2
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
        self.player_status_base_y = self.actions_base_y + self.actions_panel_height + 2
        self.player_status_label.y = self.player_status_base_y
        self.player_status_panel.y = self.player_status_base_y + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–∞
        self.health_label.y = self.player_status_base_y + 2
        self.health_bar.y = self.player_status_base_y + 2
        self.energy_label.y = self.player_status_base_y + 3
        self.energy_bar.y = self.player_status_base_y + 3
        self.mana_label.y = self.player_status_base_y + 4
        self.mana_bar.y = self.player_status_base_y + 4
        self.exp_label.y = self.player_status_base_y + 5
        self.exp_bar.y = self.player_status_base_y + 5
    
    def _update_tab_labels(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≤–∫–ª–∞–¥–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π.
        """
        for i, label in enumerate(self.tab_labels):
            if i == self.current_tab:
                label.color = Color.BRIGHT_WHITE
                label.bg_color = Color.BG_BLUE
            else:
                label.color = Color.WHITE
                label.bg_color = ""
    
    def switch_tab(self, direction=1, force=False):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É.
        
        Args:
            direction (int): 1 –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–ø—Ä–∞–≤–æ, -1 –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–ª–µ–≤–æ
            force (bool): –ï—Å–ª–∏ True, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏ –±–µ–∑ —Å–¥–≤–∏–≥–∞
        """
        old_tab = self.current_tab
        
        if force:
            # –í —Ä–µ–∂–∏–º–µ force –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏
            new_tab = direction if 0 <= direction < len(self.tabs) else 0
        else:
            # –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ —Å–¥–≤–∏–≥–æ–º
            new_tab = (self.current_tab + direction) % len(self.tabs)
        
        # –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if old_tab == new_tab and not force:
            return
        
        # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
        if old_tab == 0:
            self.description_text.visible = False
        elif old_tab == 1:
            self.characters_text.visible = False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        self.current_tab = new_tab
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        if new_tab == 0:
            self.description_text.visible = True
        elif new_tab == 1:
            self.characters_text.visible = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≤–∫–ª–∞–¥–æ–∫
        self._update_tab_labels()
        
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
        self.needs_redraw = True
    
    def update_location_info(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–Ω–µ–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
        """
        if not self.game_system:
            return
            
        location = self.game_system.get_current_location()
        if not location:
            self.location_title.set_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            self.description_text.clear()
            self.description_text.add_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–≥—Ä—ã.", Color.BRIGHT_RED)
            self.resources_text.clear()
            self.region_info.set_text("")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–∫–∞—Ü–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π
        self.location_title.set_text(f"{location.icon} {location.name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–≥–∏–æ–Ω–µ
        current_region = self.game_system.get_current_region()
        if current_region:
            self.region_info.set_text(f"{current_region.icon} {current_region.name} [{current_region.climate}]")
        else:
            self.region_info.set_text("–†–µ–≥–∏–æ–Ω: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –æ–ø–∏—Å–∞–Ω–∏—è
        self.description_text.clear()
        self.description_text.add_text(location.description, Color.WHITE)
        self.description_text.add_text("", Color.WHITE)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
        if location.connections:
            self.description_text.add_text("\n\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", Color.YELLOW)
            for conn in location.connections:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
                if isinstance(conn, dict):
                    conn_id = conn.get("id", "").lower()
                    conn_name = conn.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    icon = conn.get("icon", "üß≠")
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
                    conn_id = str(conn).lower()
                    conn_name = str(conn)
                    icon = "üß≠"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                can_use_connection = location.can_use_connection(conn_id, self.game_system.player, self.game_system)
                
                if can_use_connection:
                    conn_text = f"  {icon} {conn_name}"
                    conn_color = Color.WHITE
                else:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                    target_location = self.game_system.get_location(conn_id)
                    if target_location:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
                        player_level = self.game_system.player.level
                        
                        if player_level < target_location.requires.get("player_has_level", 0):
                            reason = f"[–Ω—É–∂–µ–Ω —É—Ä–æ–≤–µ–Ω—å {target_location.requires.get('player_has_level')}]"
                        elif "player_has_items" in target_location.requires:
                            items_needed = []
                            for item_id, count in target_location.requires["player_has_items"].items():
                                item_data = self.game_system.get_item(item_id)
                                item_name = item_data.get("name", item_id) if item_data else item_id
                                items_needed.append(f"{item_name} x{count}")
                            reason = f"[–Ω—É–∂–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(items_needed)}]"
                        elif "player_has_gold" in target_location.requires:
                            gold_needed = target_location.requires["player_has_gold"]
                            reason = f"[–Ω—É–∂–Ω–æ {gold_needed} –∑–æ–ª–æ—Ç–∞]"
                        elif "player_has_completed_quest" in target_location.requires:
                            quest_id = target_location.requires["player_has_completed_quest"]
                            reason = f"[–Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç: {quest_id}]"
                        else:
                            reason = "[–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]"
                    else:
                        reason = "[–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]"
                    
                    # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∏—á–∏–Ω–æ–π
                    conn_text = f"{icon} {conn_name} "
                    conn_color = Color.BRIGHT_BLACK  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É, –∞ –∑–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏—á–∏–Ω—É –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                    self.description_text.add_text(conn_text, conn_color, new_line=True)
                    self.description_text.add_text(reason, Color.BRIGHT_RED, new_line=False)
                    continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
                
                self.description_text.add_text(conn_text, conn_color)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        self.characters_text.clear()
        
        if location.characters:
            self.characters_text.add_text("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏:", Color.BRIGHT_CYAN)
            self.characters_text.add_text("", Color.WHITE)  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            
            for character in location.characters:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
                if isinstance(character, dict):
                    char_name = character.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    char_desc = character.get("description", "")
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
                    char_name = str(character)
                    char_desc = ""
                
                self.characters_text.add_text(f"üë§ {char_name}", Color.BRIGHT_WHITE)
                self.characters_text.add_text(f"   {char_desc}", Color.WHITE)
                self.characters_text.add_text("", Color.WHITE)  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        else:
            self.characters_text.add_text("–ù–∞ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.", Color.BRIGHT_BLACK)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö
        self.resources_text.clear()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_lines = 0
        
        if location.available_resources and len(location.available_resources) > 0:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            self.resources_text.add_text("", Color.WHITE)  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            resource_lines += 2
            
            has_available_resources = False
            
            for resource_id, amount in location.available_resources.items():
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å–∞
                item_data = self.game_system.get_item(resource_id)
                if item_data:
                    resource_name = item_data.get("name", resource_id)
                    resource_color = Color.GREEN
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
                    rarity = item_data.get("rarity", "COMMON").upper()
                    if rarity == "COMMON":
                        resource_color = Color.LIGHT_GRAY
                    elif rarity == "UNCOMMON":
                        resource_color = Color.BRIGHT_GREEN
                    elif rarity == "RARE":
                        resource_color = Color.BRIGHT_BLUE
                    elif rarity == "EPIC":
                        resource_color = Color.BRIGHT_MAGENTA
                    elif rarity == "LEGENDARY":
                        resource_color = Color.BRIGHT_YELLOW
                    
                    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ –Ω—É–ª—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    if amount > 0:
                        has_available_resources = True
                        self.resources_text.add_text(f"{resource_name}", resource_color, new_line=True)
                        self.resources_text.add_text(f" √ó ", Color.WHITE, new_line=False)
                        self.resources_text.add_text(f"{amount}", Color.BRIGHT_YELLOW, new_line=False)
                    else:
                        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ "–∏—Å—á–µ—Ä–ø–∞–Ω"
                        self.resources_text.add_text(f"{resource_name}", Color.BRIGHT_BLACK, new_line=True)
                        self.resources_text.add_text(f" - ", Color.WHITE, new_line=False)
                        self.resources_text.add_text("–∏—Å—á–µ—Ä–ø–∞–Ω", Color.BRIGHT_BLACK, new_line=False)
                    
                    # –ö–∞–∂–¥—ã–π —Ä–µ—Å—É—Ä—Å –∑–∞–Ω–∏–º–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                    resource_lines += 1
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ–æ–±—â–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not has_available_resources:
                self.resources_text.clear()
                self.resources_text.add_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏", Color.BRIGHT_BLACK)
                resource_lines = 1
        else:
            self.resources_text.add_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏", Color.BRIGHT_BLACK)
            resource_lines = 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ + 1 —Å—Ç—Ä–æ–∫–∞ –æ—Ç—Å—Ç—É–ø–∞ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
        new_resources_height = max(self.resources_min_height, resource_lines + 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤—ã—Å–æ—Ç–∞
        if new_resources_height != self.resources_panel_height:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏
            self.resources_panel_height = new_resources_height
            self.resources_panel.height = new_resources_height
            self.resources_text.height = new_resources_height - 2  # -2 –¥–ª—è —Ä–∞–º–∫–∏
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—ã—Å–æ—Ç—ã –ø–∞–Ω–µ–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            self._update_ui_positions()
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        self.location_changed = False
        self.needs_redraw = True
    
    def update_actions(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π.
        """
        if not self.game_system:
            return
            
        location = self.game_system.get_current_location()
        if not location:
            self.actions_menu.items = []
            return
        
        # –û—á–∏—â–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        items = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        for connection in location.connections:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
            conn_id = ""
            conn_name = ""
            if isinstance(connection, dict):
                conn_id = connection.get("id", "").lower()
                conn_name = connection.get("name", conn_id)
            else:
                conn_id = str(connection).lower()
                conn_name = conn_id
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
            def create_move_action(target_id):
                return lambda: self.on_move_to_location(target_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            can_use_connection = location.can_use_connection(conn_id, self.game_system.player, self.game_system)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            items.append(MenuItem(
                f"–ò–¥—Ç–∏ –≤: {conn_name}",
                create_move_action(conn_id),
                enabled=can_use_connection,  # –î–µ–ª–∞–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                text_parts=[
                    {"text": "–ò–¥—Ç–∏ –≤: ", "color": Color.WHITE},
                    {"text": conn_name, "color": Color.BRIGHT_YELLOW if can_use_connection else Color.BRIGHT_BLACK}
                ]
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        if items:
            items.append(MenuItem("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", None, enabled=False))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        has_resources = False
        
        for resource_id, amount in location.available_resources.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 0
            if amount <= 0:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å–∞
            item_data = self.game_system.get_item(resource_id)
            if item_data:
                has_resources = True
                resource_name = item_data.get("name", resource_id)
                resource_color = Color.GREEN
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
                rarity = item_data.get("rarity", "COMMON").upper()
                if rarity == "COMMON":
                    resource_color = Color.WHITE
                elif rarity == "UNCOMMON":
                    resource_color = Color.BRIGHT_GREEN
                elif rarity == "RARE":
                    resource_color = Color.BRIGHT_BLUE
                elif rarity == "EPIC":
                    resource_color = Color.BRIGHT_MAGENTA
                elif rarity == "LEGENDARY":
                    resource_color = Color.BRIGHT_YELLOW
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
                def create_collect_action(res_id):
                    return lambda: self.on_collect_resource(res_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
                items.append(MenuItem(
                    f"–î–æ–±—ã—Ç—å: {resource_name}",
                    create_collect_action(resource_id),
                    text_parts=[
                        {"text": "–î–æ–±—ã—Ç—å: ", "color": Color.WHITE},
                        {"text": resource_name, "color": resource_color}
                    ]
                ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ—Å—É—Ä—Å
        if has_resources:
            items.append(MenuItem("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", None, enabled=False))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
        has_characters = False
        for character in location.characters:
            has_characters = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
            if isinstance(character, dict):
                character_id = character.get("id", "unknown")
                character_name = character.get("name", character_id)
            else:
                character_id = str(character)
                character_name = character_id
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
            def create_talk_action(char_id):
                return lambda: self.on_talk_to_character(char_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            items.append(MenuItem(
                f"–ì–æ–≤–æ—Ä–∏—Ç—å —Å: {character_name}",
                create_talk_action(character_id),
                text_parts=[
                    {"text": "–ì–æ–≤–æ—Ä–∏—Ç—å —Å: ", "color": Color.WHITE},
                    {"text": character_name, "color": Color.BRIGHT_CYAN}
                ]
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂
        if has_characters:
            items.append(MenuItem("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", None, enabled=False))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        items.append(MenuItem(
            "–ù–∞–≤—ã–∫–∏",
            self.on_skills,
            key=Keys.from_char('k'),
            text_parts=[
                {"text": "–ù–∞–≤—ã–∫–∏", "color": Color.WHITE},
            ]
        ))
        
        items.append(MenuItem(
            "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
            self.on_inventory,
            key=Keys.from_char('i'),
            text_parts=[
                {"text": "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", "color": Color.WHITE},
            ]
        ))
        
        items.append(MenuItem(
            "–ö–≤–µ—Å—Ç—ã",
            self.on_quests,
            key=Keys.from_char('j'),
            text_parts=[
                {"text": "–ö–≤–µ—Å—Ç—ã", "color": Color.WHITE},
            ]
        ))
        
        items.append(MenuItem(
            "–ì–ª–æ—Å—Å–∞—Ä–∏–π",
            self.on_glossary,
            key=Keys.from_char('g'),
            text_parts=[
                {"text": "–ì–ª–æ—Å—Å–∞—Ä–∏–π", "color": Color.WHITE},
            ]
        ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        self.actions_menu.items = items
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç–æ–∂–µ –∑–∞–Ω–∏–º–∞—é—Ç –ø–æ —Å—Ç—Ä–æ–∫–µ
        action_lines = len(items)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
        for item in items:
            if item.text and len(item.text) > (self.actions_menu.width - 4):
                # –ü—Ä–∏–º–µ—Ä–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                text_width = self.actions_menu.width - 4
                additional_lines = (len(item.text) - 1) // text_width
                action_lines += additional_lines
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ + 1 —Å—Ç—Ä–æ–∫–∞ –æ—Ç—Å—Ç—É–ø–∞ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
        new_actions_height = max(self.actions_min_height, action_lines + 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤—ã—Å–æ—Ç–∞
        if new_actions_height != self.actions_panel_height:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏
            self.actions_panel_height = new_actions_height
            self.actions_panel.height = new_actions_height
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—ã—Å–æ—Ç—ã –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π
            self._update_ui_positions()
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        self.actions_changed = False
        self.needs_redraw = True
    
    def _draw_regions_map(self, current_region):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –∫–∞—Ä—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤.
        """
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç—ã
        map_content = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        map_content.append("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        map_content.append("‚ïë              üó∫Ô∏è –ö–ê–†–¢–ê –ú–ò–†–ê               ‚ïë")
        map_content.append("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        map_content.append("")
        map_content.append("   –§—É–Ω–∫—Ü–∏—è –∫–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        map_content.append("   –ö–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.")
        map_content.append("")
        map_content.append("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤–∫–ª–∞–¥–∫–∞–º–∏")
        map_content.append("   \"–û–ø–∏—Å–∞–Ω–∏–µ\" –∏ \"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã
        self.map_panel.set_content(map_content)
        self.map_panel.needs_redraw = True
        self.needs_redraw = True

    def _draw_location_map(self, location):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –∫–∞—Ä—Ç—ã –ª–æ–∫–∞—Ü–∏–∏.
        """
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç—ã
        map_content = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        map_content.append("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        map_content.append("‚ïë              üó∫Ô∏è –õ–û–ö–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê          ‚ïë")
        map_content.append("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        map_content.append("")
        map_content.append("   –§—É–Ω–∫—Ü–∏—è –∫–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        map_content.append("   –ö–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.")
        map_content.append("")
        map_content.append("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ª–æ–∫–∞—Ü–∏–∏")
        map_content.append("   –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å–µ–¥–Ω–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö.")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã
        self.map_panel.set_content(map_content)
        self.map_panel.needs_redraw = True
        self.needs_redraw = True
    
    def render(self):
        """
        –†–µ–Ω–¥–µ—Ä–∏—Ç —ç–∫—Ä–∞–Ω.
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.location_changed and self.game_system:
            self.update_location_info()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.actions_changed and self.game_system:
            self.update_actions()
        
        # –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —É–∂–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        pass
    
    def handle_input(self, key: int) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        if key in self.tab_keys:
            tab_index = self.tab_keys.index(key)
            self.switch_tab(tab_index, True)  # True - —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–ª–∞–≤–∏—à
        # –î–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —É–∫–∞–∑–∞–Ω—ã –∫–ª–∞–≤–∏—à–∏ 1, 2, 3, –Ω–æ –Ω–∞–∂–∞—Ç—ã –∫–ª–∞–≤–∏—à–∏ —Å Shift: !, @, #
        # ASCII –∫–æ–¥—ã: 1=49, !=33 | 2=50, @=64 | 3=51, #=35
        if key in [33, 64, 35]:  # –°–∏–º–≤–æ–ª—ã !, @, #
            shift_key_mapping = {33: 49, 64: 50, 35: 51}  # –ú–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤ —Å Shift –∫ –æ–±—ã—á–Ω—ã–º —Ü–∏—Ñ—Ä–∞–º
            normalized_key = shift_key_mapping[key]
            if normalized_key in self.tab_keys:
                tab_index = self.tab_keys.index(normalized_key)
                self.switch_tab(tab_index, True)
                return True
            
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –ø–æ Tab
        if key == Keys.TAB:
            self.switch_tab()
            return True
        
        # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é G
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        if self.actions_menu.handle_input(key):
            self.needs_redraw = True
            return True
            
        # –ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ –≤–≤–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–∞–º–∏
        if key == Keys.ESCAPE:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.engine.set_current_screen("main_menu")
            return True
        
        return False
    
    def update_ui(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. 
        –§—É–Ω–∫—Ü–∏—è –∫–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.
        """
        self.needs_redraw = True
    
    def update(self, dt: float):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞.
        """
        # –í –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if self.game_system:
            self.game_system.update(dt)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –ª–æ–∫–∞—Ü–∏—è
            if self.location_changed:
                self.update_location_info()
                self._draw_location_map(self.game_system.get_current_location())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
            if self.actions_changed:
                self.update_actions()
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _fix_flex_panel(self):
        """
        –†–∞—Å—à–∏—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å FlexPanel, –¥–æ–±–∞–≤–ª—è—è –º–µ—Ç–æ–¥ set_content,
        –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–ª–∞—Å—Å–µ.
        """
        if not hasattr(self.map_panel, 'set_content'):
            def set_content(panel, content):
                panel._content = []
                if content:
                    panel._content.extend(content)
                panel.needs_redraw = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ set_content –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            import types
            self.map_panel.set_content = types.MethodType(set_content, self.map_panel)
            print("–î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ set_content –¥–ª—è FlexPanel")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    def on_move_to_location(self, location_id):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞—Ü–∏—é.
        
        Args:
            location_id (str): ID –ª–æ–∫–∞—Ü–∏–∏
        """
        if self.game_system:
            if self.game_system.change_location(location_id):
                # –õ–æ–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.location_changed = True
                self.actions_changed = True
                self.needs_redraw = True
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
                self._draw_location_map(self.game_system.get_current_location())
    
    def on_collect_resource(self, resource_id):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞.
        
        Args:
            resource_id (str): ID —Ä–µ—Å—É—Ä—Å–∞
        """
        if self.game_system:
            collected = self.game_system.collect_resource(resource_id)
            if collected > 0:
                # –†–µ—Å—É—Ä—Å —Å–æ–±—Ä–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.location_changed = True
                self.actions_changed = True
                self.needs_redraw = True
                
    def on_skills(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤.
        """
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞–≤—ã–∫–æ–≤
    
    def on_inventory(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.
        """
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    
    def on_quests(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∂—É—Ä–Ω–∞–ª–∞ –∫–≤–µ—Å—Ç–æ–≤.
        """
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∫–≤–µ—Å—Ç–æ–≤...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –∫–≤–µ—Å—Ç–æ–≤
    
    def on_glossary(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–æ—Å—Å–∞—Ä–∏—è.
        """
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–æ—Å—Å–∞—Ä–∏—è...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –≥–ª–æ—Å—Å–∞—Ä–∏—è
    
    def on_talk_to_character(self, character_id):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º.
        
        Args:
            character_id (str): ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        """
        print(f"–†–∞–∑–≥–æ–≤–æ—Ä —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º {character_id}...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤—ã–π —ç–∫—Ä–∞–Ω 

    def _wrap_text(self, text, width):
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π width.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        """
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if not text:
            return []
            
        words = text.split()
        lines = []
        current_line = []
        current_length = 0
        
        for word in words:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            if current_length + len(word) + len(current_line) <= width:
                current_line.append(word)
                current_length += len(word)
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if current_line:
                    lines.append(" ".join(current_line))
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
                current_line = [word]
                current_length = len(word)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        if current_line:
            lines.append(" ".join(current_line))
            
        return lines 