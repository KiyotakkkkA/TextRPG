"""
–ú–æ–¥–µ–ª—å —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –∏–≥—Ä—ã.
–†–µ–≥–∏–æ–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è —Å–æ–±–æ–π –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –æ–±–ª–∞—Å—Ç—å.
"""

from typing import Dict, List, Any, Optional
import random
from src.models.interfaces import Require, Serializable

class Region(Require, Serializable):
    """
    –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ä–µ–≥–∏–æ–Ω –≤ –∏–≥—Ä–µ.
    –†–µ–≥–∏–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–π –∏ –∏–º–µ–µ—Ç —Å–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
    """
    
    def __init__(self, data):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–≥–∏–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            data (dict): –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞.
        """
        self.id = data.get("id", "")
        self.name = data.get("name", "")
        self.description = data.get("description", "")
        self.locations = data.get("locations", [])
        self.starting_location = data.get("starting_location", "")
        self.connections = data.get("connections", [])
        self.climate = data.get("climate", "—É–º–µ—Ä–µ–Ω–Ω—ã–π")
        self.difficulty = data.get("difficulty", "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π")
        self.requires = data.get("requires", {})
        self.icon = data.get("icon", "üåç")
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ
        self.x = data.get("x", 0)
        self.y = data.get("y", 0)
        
        # –°–æ—Å–µ–¥–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
        self.adjacent_regions = data.get("adjacent_regions", [])
    
    def add_location(self, location_id: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é –≤ —Ä–µ–≥–∏–æ–Ω.
        
        Args:
            location_id (str): ID –ª–æ–∫–∞—Ü–∏–∏
        """
        if location_id not in self.locations:
            self.locations.append(location_id)
    
    def remove_location(self, location_id: str):
        """
        –£–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞.
        
        Args:
            location_id (str): ID –ª–æ–∫–∞—Ü–∏–∏
        """
        if location_id in self.locations:
            self.locations.remove(location_id)
    
    def is_adjacent_to(self, region_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å–µ–¥—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º.
        
        Args:
            region_id (str): ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω—ã —Å–æ—Å–µ–¥—Å—Ç–≤—É—é—Ç
        """
        return region_id in self.adjacent_regions
    
    def to_dict(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞.
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞
        """
        return {
            "id": self.id,
            "name": self.name,
            "description": self.description,
            "locations": self.locations.copy(),
            "starting_location": self.starting_location,
            "connections": self.connections.copy(),
            "climate": self.climate,
            "difficulty": self.difficulty,
            "requires": self.requires.copy(),
            "icon": self.icon,
            "x": self.x,
            "y": self.y,
            "adjacent_regions": self.adjacent_regions.copy()
        }
    
    def __str__(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"""
        return f"{self.name} (ID: {self.id}, {len(self.locations)} –ª–æ–∫–∞—Ü–∏–π, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {self.difficulty})"
    
    def can_access(self, player, game_system):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–≥–∏–æ–Ω—É.
        
        Args:
            player: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
            game_system: –û–±—ä–µ–∫—Ç –∏–≥—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            bool: True, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–≥–∏–æ–Ω—É
        """
        return self.check_requirements(self.requires, player, game_system) 