from src.models.inventory.Inventory import Inventory
from src.models.inventory.InventoryItem import InventoryItem
from src.models.inventory.types.Material import Material
from src.models.skills.SkillSystem import SkillSystem
from colorama import Fore, Style

class Player:
    def __init__(self):
        self.inventory = Inventory()
        self.current_location = None  # –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
        self.skill_system = SkillSystem()
        # –ü—É—Ç—å –∫ –Ω–∞–≤—ã–∫–∞–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω
        self.skill_system.load_skills("resources/skills")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.name = "–ì–µ—Ä–æ–π"  # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.level = 1
        self.experience = 0
        self.exp_to_next_level = 100
        
        # –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        self.health = 100
        self.max_health = 100
        self.mana = 50
        self.max_mana = 50
        self.stamina = 100
        self.max_stamina = 100
        
        # –†–µ—Å—É—Ä—Å—ã
        self.money = 0

    def add_item(self, item: InventoryItem):
        self.inventory.add_item(item)

    def remove_item(self, item: InventoryItem):
        self.inventory.remove_item(item)
        
    def print_inventory(self):
        self.inventory.print_inventory()

    def add_item_by_id(self, game, item_id, count=1):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ –ø–æ ID –∏–∑ –∞—Ç–ª–∞—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
        if item_id and item_id.lower() in game.ATLAS["ITEMS"]:
            item_id = item_id.lower()
        
        item = game.create_inventory_item(item_id, count)
        if item:
            self.add_item(item)
            
            # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–æ–≤
            # –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç
            game.update_quest_progress()
            
            return True
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å ID: {item_id}")
        return False
        
    def set_location(self, location):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞"""
        self.current_location = location
        
    def move_to(self, game, location_id):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        location = game.get_location(location_id)
        if not location:
            print(f"–õ–æ–∫–∞—Ü–∏—è {location_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π
        if self.current_location and location_id not in self.current_location.connected_locations:
            print(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –≤ –ª–æ–∫–∞—Ü–∏—é {location.name} –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞!")
            return False
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        self.current_location = location
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π —Ü–µ–ª–∏ –∏ —Ü–µ–ª—è–º –∫–≤–µ—Å—Ç–∞
        if hasattr(game, 'update_tracked_path'):
            game.update_tracked_path()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
        game.update_quest_progress()
        
        print(f"–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –ª–æ–∫–∞—Ü–∏—é: {location.name}")
        print(location.describe())
        return True

    def collect_resource(self, game, resource_id, count=1):
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ä–µ—Å—É—Ä—Å –∏–∑ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏"""
        if not self.current_location:
            print("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –≤ –ª–æ–∫–∞—Ü–∏–∏
        if resource_id not in self.current_location.resources or self.current_location.resources[resource_id] <= 0:
            print(f"–†–µ—Å—É—Ä—Å {resource_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω –≤ –∏–≥—Ä–µ
        item_data = game.get_item(resource_id)
        if not item_data:
            print(f"–û–®–ò–ë–ö–ê: –†–µ—Å—É—Ä—Å {resource_id} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∏–≥—Ä–µ!")
            return False
        
        if item_data.get("collectable", True):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–≤—ã–∫–∞–º
            required_skills = item_data.get("required_skills", {})
            can_collect = True
            
            for skill_id, min_level in required_skills.items():
                skill = self.skill_system.get_skill(skill_id)
                if not skill or skill.level < min_level:
                    print(f"–î–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞ {item_data.get('name', resource_id)} –Ω–µ–æ–±—Ö–æ–¥–∏–º –Ω–∞–≤—ã–∫ {skill_id} —É—Ä–æ–≤–Ω—è {min_level}!")
                    can_collect = False
                    break
            
            if not can_collect:
                return False
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å
        collected = self.current_location.collect_resource(resource_id, count)
        if collected > 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            if not self.add_item_by_id(game, resource_id, collected):
                print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å {resource_id} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ—Å—É—Ä—Å –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª–æ–∫–∞—Ü–∏—é
                self.current_location.resources[resource_id] += collected
                return False
            
            # –ó–¥–µ—Å—å item_data —Ç–æ—á–Ω–æ –Ω–µ None, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —ç—Ç–æ –≤—ã—à–µ
            print(f"–í—ã —Å–æ–±—Ä–∞–ª–∏ {collected} –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–∞ {item_data.get('name', resource_id)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–π
            game.add_resource_to_glossary(resource_id, self.current_location.id)
            
            # –ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏
            if item_data:
                skill_exp = item_data.get("skill_exp", {})
                for skill_id, exp_amount in skill_exp.items():
                    skill = self.skill_system.get_skill(skill_id)
                    if skill:
                        total_exp = exp_amount * collected
                        old_level = skill.level
                        level_up = self.skill_system.add_experience(skill_id, total_exp)
                        
                        # –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞
                        print(f"+{total_exp} –æ–ø—ã—Ç–∞ –Ω–∞–≤—ã–∫–∞ {skill.name}")
                        
                        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                        if level_up:
                            print(f"\n{Fore.YELLOW}üîº –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ {skill.name} –ø–æ–≤—ã—à–µ–Ω –¥–æ {skill.level}!{Style.RESET_ALL}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                            for lvl in range(old_level + 1, skill.level + 1):
                                unlocked_items = skill.get_unlocked_items_at_level(lvl)
                                if unlocked_items:
                                    print(f"{Fore.GREEN}–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ {lvl}:{Style.RESET_ALL}")
                                    for item_id in unlocked_items:
                                        item_info = game.get_item(item_id)
                                        if item_info and "name" in item_info:
                                            print(f"- {item_info['name']}")
            
            return True
        
        return False

    def look_around(self):
        """–û—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é"""
        if not self.current_location:
            print("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏!")
            return
        
        print(self.current_location.describe())

    def get_skills(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏–≥—Ä–æ–∫–∞"""
        return self.skill_system.get_all_skills()
        
    def can_collect_resource(self, resource_id, item_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞"""
        if not item_data:
            return False
        
        required_skills = item_data.get("required_skills", {})
        
        for skill_id, min_level in required_skills.items():
            skill = self.skill_system.get_skill(skill_id)
            if not skill or skill.level < min_level:
                return False
            
        return True
        
    def get_exp_percentage(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –æ–ø—ã—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100"""
        if self.exp_to_next_level == 0:
            return 100
        
        return int((self.experience / self.exp_to_next_level) * 100)

    def get_health_percentage(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if self.max_health == 0:
            return 0
        
        return int((self.health / self.max_health) * 100)

    def get_mana_percentage(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –º–∞–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if self.max_mana == 0:
            return 0
        
        return int((self.mana / self.max_mana) * 100)

    def get_stamina_percentage(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if self.max_stamina == 0:
            return 0
        
        return int((self.stamina / self.max_stamina) * 100)
        
    def add_experience(self, amount):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É –∏ –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞"""
        if amount <= 0:
            return False
        
        self.experience += amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        level_up = False
        while self.experience >= self.exp_to_next_level:
            self.level_up()
            level_up = True
        
        return level_up

    def level_up(self):
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        self.level += 1
        self.experience -= self.exp_to_next_level
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        self.exp_to_next_level = int(self.exp_to_next_level * 1.5)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.max_health += 10
        self.health = self.max_health
        
        self.max_mana += 5
        self.mana = self.max_mana
        
        self.max_stamina += 5
        self.stamina = self.max_stamina
        
        return True

    def add_money(self, amount):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É"""
        if amount <= 0:
            return False
            
        self.money += amount
        return True
        
    def spend_money(self, amount):
        """–¢—Ä–∞—Ç–∏—Ç –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–∞
        
        Args:
            amount: –°—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —ç—Ç—É —Ç—Ä–∞—Ç—É, False –∏–Ω–∞—á–µ
        """
        if amount <= 0:
            return True
            
        if self.money < amount:
            return False
            
        self.money -= amount
        return True
        
