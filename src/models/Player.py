from src.models.inventory.Inventory import Inventory
from src.models.inventory.InventoryItem import InventoryItem
from src.models.inventory.types.Material import Material
from src.models.inventory.types.Armor import Armor
from src.models.skills.SkillSystem import SkillSystem
from src.utils.Logger import Logger
from colorama import Fore, Style

class Player:
    def __init__(self):
        self.inventory = Inventory()
        self.current_location = None  # –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
        self.skill_system = SkillSystem()
        self.logger = Logger()
        # –ü—É—Ç—å –∫ –Ω–∞–≤—ã–∫–∞–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω
        self.skill_system.load_skills("resources/skills")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.name = "–ì–µ—Ä–æ–π"  # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.level = 1
        self.experience = 0
        self.exp_to_next_level = 100
        
        # –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        self.health = 100
        self.max_health = 100
        self.mana = 50
        self.max_mana = 50
        self.stamina = 100
        self.max_stamina = 100
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        self.dodge_chance = 10  # –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        self.crit_chance = 5    # –®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        self.crit_damage = 1.5  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞ (—Ö1.5)
        
        # –†–µ—Å—É—Ä—Å—ã
        self.money = 0
        
        # –°–∏—Å—Ç–µ–º–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        self.equipment = {
            "head": None,       # –®–ª–µ–º/–∫–∞–ø—é—à–æ–Ω
            "body": None,       # –ë—Ä–æ–Ω—è/–æ–¥–µ–∂–¥–∞
            "legs": None,       # –®—Ç–∞–Ω—ã/–ø–æ–Ω–æ–∂–∏
            "feet": None,       # –ë–æ—Ç–∏–Ω–∫–∏/—Å–∞–ø–æ–≥–∏
            "hands": None,      # –ü–µ—Ä—á–∞—Ç–∫–∏/—Ä—É–∫–∞–≤–∏—Ü—ã
            "weapon": None,     # –û—Ä—É–∂–∏–µ
            "offhand": None,    # –©–∏—Ç/–≤—Ç–æ—Ä–æ–µ –æ—Ä—É–∂–∏–µ
            "accessory1": None, # –ö–æ–ª—å—Ü–æ/–∞–º—É–ª–µ—Ç/–∏ —Ç.–¥.
            "accessory2": None  # –ï—â–µ –æ–¥–Ω–æ –∫–æ–ª—å—Ü–æ/–∞–º—É–ª–µ—Ç/–∏ —Ç.–¥.
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        self.equipment_bonuses = {
            "defense": 0,
            "attack": 0,
            "magic": 0,
            "dodge": 0,        # –ë–æ–Ω—É—Å –∫ —à–∞–Ω—Å—É —É–∫–ª–æ–Ω–µ–Ω–∏—è
            "crit_chance": 0,  # –ë–æ–Ω—É—Å –∫ —à–∞–Ω—Å—É –∫—Ä–∏—Ç–∞
            "crit_damage": 0   # –ë–æ–Ω—É—Å –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é –∫—Ä–∏—Ç. —É—Ä–æ–Ω–∞
        }
        
    def add_item(self, item: InventoryItem):
        self.inventory.add_item(item)

    def remove_item(self, item: InventoryItem):
        self.inventory.remove_item(item)
        
    def print_inventory(self):
        self.inventory.print_inventory()

    def add_item_by_id(self, game, item_id, count=1):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ –ø–æ ID –∏–∑ –∞—Ç–ª–∞—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
        if item_id and item_id.lower() in game.ATLAS["ITEMS"]:
            item_id = item_id.lower()
        
        item = game.create_inventory_item(item_id, count)
        if item:
            self.add_item(item)
            
            # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–æ–≤
            # –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç
            game.update_quest_progress()
            
            return True
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å ID: {item_id}")
        return False
        
    def set_location(self, location):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        
        Args:
            location: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID –ª–æ–∫–∞—Ü–∏–∏
        """
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç Location, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        if hasattr(location, 'id'):
            self.current_location = location.id
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ID –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            self.current_location = location
        
    def move_to(self, game, location_id):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        location = game.get_location(location_id)
        if not location:
            print(f"–õ–æ–∫–∞—Ü–∏—è {location_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç—É –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—É—â–µ–π
        current_loc = self.current_location
        if current_loc:
            current_location = game.get_location(current_loc)
            if current_location and location_id not in current_location.connected_locations:
                print(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –≤ –ª–æ–∫–∞—Ü–∏—é {location.name} –∏–∑ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏!")
                return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID)
        self.current_location = location_id
        
        # –û—Ç–º–µ—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—É—é
        game.mark_location_as_visited(location_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ü–µ–ª–µ–π
        if hasattr(game, 'update_tracked_path'):
            game.update_tracked_path()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
        game.update_quest_progress()
        
        print(f"–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –ª–æ–∫–∞—Ü–∏—é: {location.name}")
        print(location.describe())
        return True

    def collect_resource(self, game, resource_id, count=1):
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ä–µ—Å—É—Ä—Å –∏–∑ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏"""
        if not self.current_location:
            print("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –≤ –ª–æ–∫–∞—Ü–∏–∏
        current_location = game.get_location(self.current_location)
        if not current_location:
            print("–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
        if resource_id not in current_location.resources or current_location.resources[resource_id] <= 0:
            print(f"–†–µ—Å—É—Ä—Å {resource_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω –≤ –∏–≥—Ä–µ
        item_data = game.get_item(resource_id)
        if not item_data:
            print(f"–û–®–ò–ë–ö–ê: –†–µ—Å—É—Ä—Å {resource_id} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∏–≥—Ä–µ!")
            return False
        
        if item_data.get("collectable", True):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–≤—ã–∫–∞–º
            required_skills = item_data.get("required_skills", {})
            can_collect = True
            
            for skill_id, min_level in required_skills.items():
                skill = self.skill_system.get_skill(skill_id)
                if not skill or skill.level < min_level:
                    print(f"–î–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞ {item_data.get('name', resource_id)} –Ω–µ–æ–±—Ö–æ–¥–∏–º –Ω–∞–≤—ã–∫ {skill_id} —É—Ä–æ–≤–Ω—è {min_level}!")
                    can_collect = False
                    break
            
            if not can_collect:
                return False
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å
        collected = current_location.collect_resource(resource_id, count)
        if collected > 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            if not self.add_item_by_id(game, resource_id, collected):
                print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å {resource_id} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ—Å—É—Ä—Å –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª–æ–∫–∞—Ü–∏—é
                current_location.resources[resource_id] += collected
                return False
            
            # –ó–¥–µ—Å—å item_data —Ç–æ—á–Ω–æ –Ω–µ None, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —ç—Ç–æ –≤—ã—à–µ
            print(f"–í—ã —Å–æ–±—Ä–∞–ª–∏ {collected} –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–∞ {item_data.get('name', resource_id)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–π
            game.add_resource_to_glossary(resource_id, self.current_location)
            
            # –ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏
            if item_data:
                skill_exp = item_data.get("skill_exp", {})
                for skill_id, exp_amount in skill_exp.items():
                    skill = self.skill_system.get_skill(skill_id)
                    if skill:
                        total_exp = exp_amount * collected
                        old_level = skill.level
                        level_up = self.skill_system.add_experience(skill_id, total_exp)
                        
                        # –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞
                        print(f"+{total_exp} –æ–ø—ã—Ç–∞ –Ω–∞–≤—ã–∫–∞ {skill.name}")
                        
                        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                        if level_up:
                            print(f"\n{Fore.YELLOW}üîº –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ {skill.name} –ø–æ–≤—ã—à–µ–Ω –¥–æ {skill.level}!{Style.RESET_ALL}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                            for lvl in range(old_level + 1, skill.level + 1):
                                unlocked_items = skill.get_unlocked_items_at_level(lvl)
                                if unlocked_items:
                                    print(f"{Fore.GREEN}–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ {lvl}:{Style.RESET_ALL}")
                                    for item_id in unlocked_items:
                                        item_info = game.get_item(item_id)
                                        if item_info and "name" in item_info:
                                            print(f"- {item_info['name']}")
            
            return True
        
        return False

    def look_around(self, game):
        """–û—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é"""
        if not self.current_location:
            print("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏!")
            return
        
        current_location = game.get_location(self.current_location)
        if current_location:
            print(current_location.describe())
        else:
            print(f"–û—à–∏–±–∫–∞: –ª–æ–∫–∞—Ü–∏—è —Å ID {self.current_location} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def get_skills(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏–≥—Ä–æ–∫–∞"""
        return self.skill_system.get_all_skills()
        
    def get_skill_bonus(self, bonus_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –ø–æ –≤—Å–µ–º –Ω–∞–≤—ã–∫–∞–º
        
        Args:
            bonus_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞
            
        Returns:
            float: –°—É–º–º–∞—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
        """
        total_bonus = 0
        for skill in self.get_skills():
            total_bonus += skill.get_bonus_value(bonus_name)
        return total_bonus
        
    def get_all_skill_bonuses(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏ –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å {bonus_name: total_value}
        """
        all_bonuses = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
        for skill in self.get_skills():
            skill_bonuses = skill.get_all_bonuses()
            for bonus_name, value in skill_bonuses.items():
                if bonus_name in all_bonuses:
                    all_bonuses[bonus_name] += value
                else:
                    all_bonuses[bonus_name] = value
                    
        return all_bonuses
        
    def can_collect_resource(self, resource_id, item_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞"""
        if not item_data:
            return False
        
        required_skills = item_data.get("required_skills", {})
        
        for skill_id, min_level in required_skills.items():
            skill = self.skill_system.get_skill(skill_id)
            if not skill or skill.level < min_level:
                return False
            
        return True
        
    def get_exp_percentage(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –æ–ø—ã—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 100"""
        if self.exp_to_next_level == 0:
            return 100
        
        return int((self.experience / self.exp_to_next_level) * 100)

    def get_health_percentage(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if self.max_health == 0:
            return 0
        
        return int((self.health / self.max_health) * 100)

    def get_mana_percentage(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –º–∞–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if self.max_mana == 0:
            return 0
        
        return int((self.mana / self.max_mana) * 100)

    def get_stamina_percentage(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if self.max_stamina == 0:
            return 0
        
        return int((self.stamina / self.max_stamina) * 100)
        
    def add_experience(self, amount):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É –∏ –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞"""
        if amount <= 0:
            return False
        
        self.experience += amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        level_up = False
        while self.experience >= self.exp_to_next_level:
            self.level_up()
            level_up = True
        
        return level_up

    def level_up(self):
        """–ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        self.level += 1
        self.experience -= self.exp_to_next_level
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        self.exp_to_next_level = int(self.exp_to_next_level * 1.5)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.max_health += 10
        self.health = self.max_health
        
        self.max_mana += 5
        self.mana = self.max_mana
        
        self.max_stamina += 5
        self.stamina = self.max_stamina
        
        return True

    def add_money(self, amount):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É"""
        if amount > 0:
            self.money += amount
            return True
        return False
        
    def spend_money(self, amount):
        """–¢—Ä–∞—Ç–∏—Ç –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –∏—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"""
        if amount > 0 and self.money >= amount:
            self.money -= amount
            return True
        return False
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–æ–π
    def equip_item(self, item):
        """–ù–∞–¥–µ–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        
        Args:
            item: –û–±—ä–µ–∫—Ç –Ω–∞–¥–µ–≤–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª –Ω–∞–¥–µ—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not item:
            return False, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –º–æ–∂–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å
        if not hasattr(item, 'get_slot'):
            return False, "–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å"
        
        slot = item.get_slot()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–ª–æ—Ç
        if slot not in self.equipment:
            return False, f"–°–ª–æ—Ç {slot} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –ï—Å–ª–∏ —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if self.equipment[slot]:
            old_item = self.equipment[slot]
            self.inventory.add_item(old_item)
            self.logger.info(f"–°–Ω—è—Ç –ø—Ä–µ–¥–º–µ—Ç {old_item.name} –∏–∑ —Å–ª–æ—Ç–∞ {slot}")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        self.inventory.remove_item(item)
        
        # –ù–∞–¥–µ–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        self.equipment[slot] = item
        self.logger.info(f"–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–¥–º–µ—Ç {item.name} –≤ —Å–ª–æ—Ç {slot}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        self._update_equipment_bonuses()
        
        return True, f"–ü—Ä–µ–¥–º–µ—Ç {item.name} —É—Å–ø–µ—à–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω"
    
    def unequip_item(self, slot):
        """–°–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        
        Args:
            slot: –°–ª–æ—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±—ã–ª —Å–Ω—è—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Å–ª–æ—Ç
        if slot not in self.equipment:
            return False, f"–°–ª–æ—Ç {slot} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç–µ
        if not self.equipment[slot]:
            return False, f"–°–ª–æ—Ç {slot} –ø—É—Å—Ç"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        item = self.equipment[slot]
        self.inventory.add_item(item)
        
        # –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç
        self.equipment[slot] = None
        self.logger.info(f"–°–Ω—è—Ç –ø—Ä–µ–¥–º–µ—Ç {item.name} –∏–∑ —Å–ª–æ—Ç–∞ {slot}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        self._update_equipment_bonuses()
        
        return True, f"–ü—Ä–µ–¥–º–µ—Ç {item.name} —Å–Ω—è—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"
    
    def _update_equipment_bonuses(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
        self.equipment_bonuses = {
            "defense": 0,
            "attack": 0,
            "magic": 0,
            "dodge": 0,
            "crit_chance": 0,
            "crit_damage": 0
        }
        
        # –°—É–º–º–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        for slot, item in self.equipment.items():
            if not item:
                continue
                
            # –î–ª—è –±—Ä–æ–Ω–∏ —Å—á–∏—Ç–∞–µ–º –∑–∞—â–∏—Ç—É
            if hasattr(item, 'get_defense'):
                self.equipment_bonuses["defense"] += item.get_defense()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –±–æ–Ω—É—Å—ã –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
            if hasattr(item, 'get_bonuses'):
                bonuses = item.get_bonuses()
                for bonus_type, value in bonuses.items():
                    if bonus_type in self.equipment_bonuses:
                        self.equipment_bonuses[bonus_type] += value
            
            # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        
        self.logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: {self.equipment_bonuses}")
    
    def get_equipped_items(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"""
        return self.equipment
    
    def get_equipment_bonuses(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
        return self.equipment_bonuses
    
    def take_damage(self, damage):
        """–ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä–æ–Ω–∏
        
        Args:
            damage: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–º–µ—Ä –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
            bool: –ë—ã–ª–æ –ª–∏ —É–∫–ª–æ–Ω–µ–Ω–∏–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è
        import random
        total_dodge = self.dodge_chance + self.equipment_bonuses.get("dodge", 0)
        is_dodged = random.randint(1, 100) <= total_dodge
        
        if is_dodged:
            self.logger.debug(f"–ò–≥—Ä–æ–∫ {self.name} —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏")
            return False, True
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –±—Ä–æ–Ω–∏
        actual_damage = max(1, damage - self.equipment_bonuses.get("defense", 0))
        self.health = max(0, self.health - actual_damage)
        self.logger.debug(f"–ò–≥—Ä–æ–∫ {self.name} –ø–æ–ª—É—á–∏–ª {actual_damage} —É—Ä–æ–Ω–∞ (–∏—Å—Ö–æ–¥–Ω—ã–π —É—Ä–æ–Ω {damage}), –æ—Å—Ç–∞–ª–æ—Å—å {self.health} HP")
        return self.health <= 0, False
    
    def is_alive(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫"""
        return self.health > 0
    
    def calculate_damage(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –∏ –Ω–∞–≤—ã–∫–æ–≤
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞
            bool: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –∏–ª–∏ –Ω–µ—Ç
        """
        # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –æ—Ç —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞
        base_damage = 5 + (self.level - 1) * 2
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        equipment_bonus = self.equipment_bonuses.get("attack", 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
        skill_bonuses = self.get_all_skill_bonuses()
        skill_attack_bonus = skill_bonuses.get("attack", 0)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è
        weapon_type_bonus = 0
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä—É–∂–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ —Ç–∏–ø
        weapon = self.equipment.get("weapon")
        if weapon:
            weapon_type = weapon.get_type()
            weapon_type_bonus = skill_bonuses.get(f"{weapon_type}_damage", 0)
        
        total_damage = base_damage + equipment_bonus + skill_attack_bonus + weapon_type_bonus
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä
        import random
        base_crit_chance = self.crit_chance + self.equipment_bonuses.get("crit_chance", 0)
        skill_crit_bonus = skill_bonuses.get("critical_chance", 0)
        total_crit_chance = base_crit_chance + skill_crit_bonus
        
        is_critical = random.randint(1, 100) <= total_crit_chance
        
        # –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–Ω
        if is_critical:
            base_crit_multiplier = self.crit_damage + self.equipment_bonuses.get("crit_damage", 0)
            skill_crit_damage_bonus = skill_bonuses.get("critical_damage", 0)
            total_crit_multiplier = base_crit_multiplier + skill_crit_damage_bonus
            
            total_damage = total_damage * total_crit_multiplier
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é +/- 20%
        variation = random.uniform(0.8, 1.2)
        
        return max(1, int(total_damage * variation)), is_critical
    
    def attack(self, target):
        """–ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç —Ü–µ–ª—å
        
        Args:
            target: –¶–µ–ª—å –∞—Ç–∞–∫–∏ (–æ–±—ã—á–Ω–æ –º–æ–Ω—Å—Ç—Ä)
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞
            bool: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –∏–ª–∏ –Ω–µ—Ç
            bool: –ë—ã–ª–æ –ª–∏ —É–∫–ª–æ–Ω–µ–Ω–∏–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–ª–æ–Ω–∏–ª–∞—Å—å –ª–∏ —Ü–µ–ª—å
        import random
        dodge_chance = 5  # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –º–æ–Ω—Å—Ç—Ä–æ–≤
        if hasattr(target, 'dodge_chance'):
            dodge_chance = target.dodge_chance
            
        is_dodged = random.randint(1, 100) <= dodge_chance
        
        if is_dodged:
            self.logger.debug(f"–ú–æ–Ω—Å—Ç—Ä {target.name} —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞ {self.name}")
            return 0, False, True
        
        # –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
        damage, is_critical = self.calculate_damage()
        target.take_damage(damage)
        
        if is_critical:
            self.logger.debug(f"–ò–≥—Ä–æ–∫ {self.name} –Ω–∞–Ω–µ—Å –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —É–¥–∞—Ä {target.name} –Ω–∞ {damage} —É—Ä–æ–Ω–∞")
        else:
            self.logger.debug(f"–ò–≥—Ä–æ–∫ {self.name} –∞—Ç–∞–∫–æ–≤–∞–ª {target.name} –Ω–∞ {damage} —É—Ä–æ–Ω–∞")
            
        return damage, is_critical, False
    
    def heal(self, amount):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
        
        Args:
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        """
        self.health = min(self.max_health, self.health + amount)
        self.logger.debug(f"–ò–≥—Ä–æ–∫ {self.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {amount} HP, —Ç–µ–ø–µ—Ä—å {self.health} HP")
        
    def show_skills_info(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏–≥—Ä–æ–∫–∞"""
        skills = self.get_skills()
        
        if not skills:
            print("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤.")
            return
            
        print(f"\n=== –ù–ê–í–´–ö–ò ({len(skills)}) ===")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é (–æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫ –Ω–∏–∑–∫–æ–º—É)
        sorted_skills = sorted(skills, key=lambda x: x.level, reverse=True)
        
        for skill in sorted_skills:
            print("\n" + skill.get_description_text())
            
    def show_skill_info(self, skill_id):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –Ω–∞–≤—ã–∫–µ"""
        skill = self.skill_system.get_skill(skill_id)
        
        if not skill:
            print(f"–ù–∞–≤—ã–∫ '{skill_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        print("\n" + skill.get_description_text())
            
    def get_skill_info(self, skill_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–≤—ã–∫–µ
        
        Args:
            skill_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–≤—ã–∫–∞
            
        Returns:
            dict or None: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–≤—ã–∫–µ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        skill = self.skill_system.get_skill(skill_id)
        
        if not skill:
            return None
            
        return skill.get_detail_info()
        
