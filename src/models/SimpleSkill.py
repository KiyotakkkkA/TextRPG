"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ –∏–≥—Ä–µ.
"""

from typing import Dict, Any, List, Optional, Callable, TYPE_CHECKING
from src.utils.Logger import Logger
from src.EventSystem import get_event_system
from src.models.interfaces.Serializable import Serializable

if TYPE_CHECKING:
    from src.models.Player import Player

class SimpleSkill(Serializable):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ –∏–≥—Ä–µ.
    
    –ù–∞–≤—ã–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞
    —Å –ø–æ–º–æ—â—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞. –ù–∞–≤—ã–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–º–∏ (–¥–∞—é—â–∏–º–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã)
    –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ (–∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å).
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
        id (str): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–≤—ã–∫–∞.
        name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞.
        description (str): –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞.
        icon (str): –ò–∫–æ–Ω–∫–∞ –Ω–∞–≤—ã–∫–∞ (—ç–º–æ–¥–∑–∏ –∏–ª–∏ —Å–∏–º–≤–æ–ª).
        group_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞–≤—ã–∫.
        level (int): –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞.
        current_experience (int): –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç –Ω–∞–≤—ã–∫–∞.
        max_level_experience (int): –û–ø—ã—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
        max_level (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞.
        passive_bonuses (Dict[int, Dict[str, Any]]): –ü–∞—Å—Å–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ.
        unlocked_abilities (Dict[int, List[str]]): –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ.
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≤—ã–∫ —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö.
        """
        self.id = "base_skill"
        self.group_id = "misc"
        self.name = "–ë–∞–∑–æ–≤—ã–π –Ω–∞–≤—ã–∫"
        self.description = "–ë–∞–∑–æ–≤—ã–π –Ω–∞–≤—ã–∫ –±–µ–∑ –æ—Å–æ–±—ã—Ö —Å–≤–æ–π—Å—Ç–≤."
        self.icon = "üîÑ"
        self.level = 1
        self.current_experience = 0
        self.max_level_experience = 100  # –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        self.max_level = 100
        self.unlocked_at_level = 1  # –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–≤—ã–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
        
        # –ü–∞—Å—Å–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –Ω–∞–≤—ã–∫–∞
        self.passive_bonuses = {}
        
        # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
        self.unlocked_abilities = {}
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.logger = Logger()
    
    def set_level(self, level: int) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ–ø—ã—Ç–∞.
        
        Args:
            level (int): –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞.
        """
        if level < 1:
            level = 1
        if level > self.max_level:
            level = self.max_level
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        old_level = self.level
        self.level = level
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        base_exp = 100
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        # –§–æ—Ä–º—É–ª–∞: –±–∞–∑–æ–≤—ã–π_–æ–ø—ã—Ç * (1.5 ^ (—É—Ä–æ–≤–µ–Ω—å - 1))
        self.max_level_experience = int(base_exp * (1.5 ** (level - 1)))
        
        # –û–±–Ω—É–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç
        self.current_experience = 0
    
    def add_experience(self, amount: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –∫ –Ω–∞–≤—ã–∫—É –∏ –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ–ø—ã—Ç.
        –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç –æ–±–Ω—É–ª—è–µ—Ç—Å—è, –∞ —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.
        
        Args:
            amount (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
            
        Returns:
            bool: True, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –ø–æ–≤—ã—à–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        if self.level >= self.max_level:
            return False
            
        self.current_experience += amount
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–æ–±—ã—Ç–∏—è
        old_level = self.level
        levelups = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        while self.current_experience >= self.max_level_experience:
            # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            
            levelups += 1
            # –û–±–Ω—É–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç
            self.current_experience -= self.max_level_experience
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            # –§–æ—Ä–º—É–ª–∞: –±–∞–∑–æ–≤—ã–π_–æ–ø—ã—Ç * (1.5 ^ (—É—Ä–æ–≤–µ–Ω—å - 1))
            base_exp = 100
            self.max_level_experience = int(base_exp * (1.5 ** (old_level + levelups - 1)))
        
        if levelups > 0:
            self.level += levelups
            
            event_system = get_event_system()
            event_system.emit("skill_level_up", {
                "skill_id": self.id,
                "skill_name": self.name,
                "old_level": old_level,
                "new_level": self.level
            })
            return True
        
        return False
    
    def get_level(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞.
        
        Returns:
            int: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞.
        """
        return self.level
    
    def get_experience_percent(self) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é.
        
        Returns:
            float: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (0.0 - 1.0).
        """
        if self.level >= self.max_level:
            return 1.0
            
        # –ü—Ä–æ—Å—Ç–æ –¥–µ–ª–∏–º —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç –Ω–∞ —Ç—Ä–µ–±—É–µ–º—ã–π –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        progress = self.current_experience / self.max_level_experience
        return max(0.0, min(1.0, progress))
    
    def get_passive_bonuses(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Å—Å–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ.
        
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ (–∏–º—è_–±–æ–Ω—É—Å–∞: –∑–Ω–∞—á–µ–Ω–∏–µ).
        """
        bonuses = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã —Å–æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ —Ç–µ–∫—É—â–µ–≥–æ
        for level in range(1, self.level + 1):
            if level in self.passive_bonuses:
                for bonus_name, bonus_value in self.passive_bonuses[level].items():
                    bonuses[bonus_name] = bonus_value
                    
        return bonuses
    
    def get_unlocked_abilities(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ.
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.
        """
        abilities = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ —Ç–µ–∫—É—â–µ–≥–æ
        for level in range(1, self.level + 1):
            if level in self.unlocked_abilities:
                abilities.extend(self.unlocked_abilities[level])
                
        return abilities
    
    def is_unlocked(self, player_level: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–∞–≤—ã–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç unlocked_at_level –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
        
        Args:
            player_level (int): –£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞.
            
        Returns:
            bool: True, –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ False.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ç—Ä–∏–±—É—Ç unlocked_at_level
        if hasattr(self, 'unlocked_at_level'):
            return player_level >= self.unlocked_at_level
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –¥–æ—Å—Ç—É–ø–Ω–æ —Å 1 —É—Ä–æ–≤–Ω—è
        return player_level >= 1
    
    def can_use(self, player: 'Player') -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
        
        Args:
            player: –ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫.
            
        Returns:
            bool: True, –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏–Ω–∞—á–µ False.
        """
        return True
    
    def use(self, player: 'Player', *args, **kwargs) -> bool:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–≤—ã–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.
        
        Args:
            player: –ò–≥—Ä–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–∞–≤—ã–∫.
            *args, **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –Ω–∞–≤—ã–∫–∞.
            
        Returns:
            bool: True, –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –∏–Ω–∞—á–µ False.
        """
        self.logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞–≤—ã–∫ {self.name} (—É—Ä–æ–≤–µ–Ω—å {self.level})")
        return True
    
    def get_skill_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è.
        
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤—ã–∫–µ.
        """
        return {
            "id": self.id,
            "name": self.name,
            "description": self.description,
            "icon": self.icon,
            "group_id": self.group_id,
            "level": self.level,
            "current_experience": self.current_experience,
            "max_level_experience": self.max_level_experience,
            "max_level": self.max_level,
            "progress_percent": self.get_experience_percent(),
            "passive_bonuses": self.get_passive_bonuses(),
            "unlocked_abilities": self.get_unlocked_abilities()
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """
        –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –Ω–∞–≤—ã–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        
        Returns:
            Dict[str, Any]: –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–≤—ã–∫.
        """
        return {
            "id": self.id,
            "level": self.level,
            "current_experience": self.current_experience,
            "max_level": self.max_level,
            "max_level_experience": self.max_level_experience
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'SimpleSkill':
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–∞–≤—ã–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è (–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è).
        
        Args:
            data (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞.
            
        Returns:
            SimpleSkill: –°–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞–≤—ã–∫.
        """
        skill = cls()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π max_level_experience
        level = data.get("level", 1)
        skill.set_level(level)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç
        skill.current_experience = data.get("current_experience", 0)
        
        # –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å max_level_experience, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if "max_level_experience" in data:
            skill.max_level_experience = data["max_level_experience"]
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
        if "max_level" in data:
            skill.max_level = data["max_level"]
        
        return skill 