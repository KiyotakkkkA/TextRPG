import os
import json
from src.utils.Logger import Logger
from src.models.npc.TraderNPC import TraderNPC
from src.models.npc.QuestNPC import QuestNPC
from src.models.npc.DialogueNPC import DialogueNPC

class NPCManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è NPC –≤ –∏–≥—Ä–µ"""
    
    def __init__(self):
        self.npcs = {}  # {npc_id: npc_object}
        self.logger = Logger()
        
    def load_npcs(self, npcs_directory="resources/npcs"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö NPC –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –µ—ë –ø–æ–¥–ø–∞–ø–æ–∫"""
        if not os.path.exists(npcs_directory):
            self.logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è NPC –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {npcs_directory}")
            return
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        total_files_processed = 0
        total_npcs_loaded = 0
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –µ—ë –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        for root, dirs, files in os.walk(npcs_directory):
            for file in files:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON —Ñ–∞–π–ª
                if not file.endswith('.json'):
                    continue
                
                file_path = os.path.join(root, file)
                self.logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª NPC: {file_path}")
                
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º NPC –∏–∑ —Ñ–∞–π–ª–∞
                    npcs_in_file = self.load_npc_from_file(file_path)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    total_files_processed += 1
                    total_npcs_loaded += npcs_in_file
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ NPC –∏–∑ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        
        # –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.logger.info(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ NPC: {total_files_processed}")
        self.logger.info(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ NPC: {total_npcs_loaded}")
        
    def load_npc_from_file(self, file_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç NPC –∏–∑ JSON-—Ñ–∞–π–ª–∞
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö NPC –∏–∑ —Ñ–∞–π–ª–∞
        """
        npcs_loaded = 0
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                npc_data = json.load(file)
                
                for npc_id, npc_info in npc_data.items():
                    npc_type = npc_info.get("type", "dialogue")
                    name = npc_info.get("name", npc_id)
                    description = npc_info.get("description", "")
                    location_id = npc_info.get("location_id")
                    
                    # –°–æ–∑–¥–∞–µ–º NPC –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    if npc_type == "trader":
                        npc = TraderNPC(npc_id, name, description, location_id)
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫—É–ø–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–µ—Ü
                        for buy_item, price_mod in npc_info.get("buys", {}).items():
                            npc.add_buy_item(buy_item, price_mod)
                            
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–µ—Ü
                        for sell_item, sell_info in npc_info.get("sells", {}).items():
                            price = sell_info.get("price", 0)
                            count = sell_info.get("count", 1)
                            npc.add_sell_item(sell_item, price, count)
                            
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–ø—ã—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
                        if "trade_exp" in npc_info:
                            npc.trade_exp = npc_info["trade_exp"]
                            
                    elif npc_type == "quest":
                        npc = QuestNPC(npc_id, name, description, location_id)
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
                        for quest_id in npc_info.get("available_quests", []):
                            npc.add_available_quest(quest_id)
                            
                    else:  # dialogue
                        npc = DialogueNPC(npc_id, name, description, location_id)
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                        for topic_id, topic_info in npc_info.get("topics", {}).items():
                            topic_name = topic_info.get("name", topic_id)
                            dialogue_id = topic_info.get("dialogue_id", topic_id)
                            npc.add_topic(topic_id, topic_name, dialogue_id)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
                    npc.dialogue_tree = npc_info.get("dialogues", {})
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º NPC –≤ —Å–ª–æ–≤–∞—Ä—å
                    self.npcs[npc_id] = npc
                    self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω NPC: {name} (—Ç–∏–ø: {npc_type})")
                    npcs_loaded += 1
                    
            return npcs_loaded
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ NPC –∏–∑ {file_path}: {str(e)}")
            return 0
        
    def get_npc(self, npc_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç NPC –ø–æ ID"""
        return self.npcs.get(npc_id)
        
    def get_npcs_at_location(self, location_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ NPC –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
        return [npc for npc in self.npcs.values() if npc.location_id == location_id]

    def get_dialogue(self, dialogue_id="greeting"):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ ID"""
        if dialogue_id in self.dialogue_tree:
            return self.dialogue_tree[dialogue_id]
        return None
        
    def get_basic_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NPC"""
        return {
            "id": self.id,
            "name": self.name,
            "description": self.description,
            "type": self.type,
            "location": self.location_id
        }

    def check_dialogue_condition(self, game, condition):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            game: –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–≥—Ä–æ–∫–∞
            condition: –°—Ç—Ä–æ–∫–∞ —Å —É—Å–ª–æ–≤–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "quest_available_quest1")
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
            str: –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ None –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
        """
        if not condition:
            return True, None
            
        player = game.player
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–≤–µ—Å—Ç–∞
        if condition.startswith("quest_available_"):
            quest_id = condition.replace("quest_available_", "")
            quest = game.get_quest(quest_id)
            if quest and not quest.is_started() and not quest.is_completed():
                return True, None
            return False, f"[üìú –ù—É–∂–µ–Ω –∫–≤–µ—Å—Ç: {quest_id if not quest else quest.name}]"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
        elif condition.startswith("quest_completed_"):
            quest_id = condition.replace("quest_completed_", "")
            quest = game.get_quest(quest_id)
            if quest and quest.is_completed():
                return True, None
            return False, f"[üìú –ù—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å: {quest_id if not quest else quest.name}]"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–∞
        elif condition.startswith("skill_"):
            # –§–æ—Ä–º–∞—Ç: skill_SKILLID_LEVEL
            parts = condition.split("_")
            if len(parts) >= 3:
                skill_id = parts[1]
                skill_level = int(parts[2])
                
                skill = player.skill_system.get_skill(skill_id)
                if skill and skill.level >= skill_level:
                    return True, None
                    
                skill_name = skill.name if skill else skill_id.capitalize()
                return False, f"[üß† {skill_name}: {skill_level}]"
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        elif condition.startswith("item_"):
            item_id = condition.replace("item_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            for item in player.inventory.items:
                if item.id.lower() == item_id.lower():
                    return True, None
                    
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            item_data = game.get_item(item_id)
            item_name = item_data.get("name", item_id) if item_data else item_id
            return False, f"[üì¶ {item_name}]"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å NPC
        elif condition.startswith("npc_known_"):
            npc_id = condition.replace("npc_known_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ NPC –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏
            glossary_npcs = game.get_glossary_npcs()
            if npc_id in glossary_npcs:
                return True, None
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è NPC –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            npc = game.get_npc(npc_id)
            npc_name = npc.name if npc else npc_id
            return False, f"[üë§ –ó–Ω–∞–Ω–∏–µ –æ: {npc_name}]"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
        elif condition.startswith("location_visited_"):
            location_id = condition.replace("location_visited_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞—Ü–∏—è –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏ (–∫–∞–∫ –∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥)
            if hasattr(game, "visited_locations") and location_id in game.visited_locations:
                return True, None
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            location = game.get_location(location_id)
            location_name = location.name if location else location_id
            return False, f"[üó∫Ô∏è –ü–æ—Å–µ—â–µ–Ω–æ: {location_name}]"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –º–æ–Ω—Å—Ç—Ä–æ–º
        elif condition.startswith("monster_defeated_"):
            monster_id = condition.replace("monster_defeated_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–Ω—Å—Ç—Ä –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏
            glossary_monsters = game.get_glossary_monsters()
            if monster_id in glossary_monsters:
                return True, None
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–Ω—Å—Ç—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            monster_data = game.get_monster(monster_id)
            monster_name = monster_data.name if monster_data else monster_id
            return False, f"[‚öîÔ∏è –ü–æ–±–µ–∂–¥–µ–Ω–æ: {monster_name}]"
        
        # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
        return True, None 