import os
import time
import readchar
from colorama import init, Fore, Back, Style
import msvcrt
import logging
import json

from src.models.quests.Quest import Quest
from src.models.npc.QuestNPC import QuestNPC  # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è Windows
from src.ui.screens.components.tracking import print_tracked_quest, print_tracked_target
from src.ui.screens.inventory import format_resource_name, show_inventory
from src.ui.screens.npc import talk_to_npc
from src.ui.screens.quests import show_quests
from src.ui.screens.skills import show_skills
from src.ui.screens.glossary import show_glossary
from src.ui.screens.equipment import show_equipment
from src.ui.screens.combat import start_combat
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
init()

# –ö–æ–¥—ã –∫–ª–∞–≤–∏—à –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º)
KEY_UP = ['\x1b[A', '\x1bOA', 'UP']
KEY_DOWN = ['\x1b[B', '\x1bOB', 'DOWN']
KEY_RIGHT = ['\x1b[C', '\x1bOC', 'RIGHT']
KEY_LEFT = ['\x1b[D', '\x1bOD', 'LEFT']
KEY_ENTER = ['\r', '\n', 'ENTER']
KEY_ESC = ['\x1b', 'ESC']
KEY_SPACE = [' ', 'SPACE']

# Unicode-—Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö —Ä–∞–º–æ–∫
BOX_CHARS = {
    'h_line': '‚îÅ',        # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    'v_line': '‚îÉ',        # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    'tl_corner': '‚îè',     # –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
    'tr_corner': '‚îì',     # –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
    'bl_corner': '‚îó',     # –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
    'br_corner': '‚îõ',     # –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
    'lt_joint': '‚î£',      # —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–µ–≤–∞
    'rt_joint': '‚î´',      # —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞
    't_joint': '‚î≥',       # —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
    'b_joint': '‚îª',       # —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–Ω–∏–∑—É
    'cross': '‚ïã',         # –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∏–µ
}

# –°–∏–º–≤–æ–ª—ã-–∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
ICONS = {
    'location': 'üè†',     # –ª–æ–∫–∞—Ü–∏—è
    'travel': 'üë£',       # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    'resource': 'üåø',     # —Ä–µ—Å—É—Ä—Å
    'collect': '‚õèÔ∏è',      # –¥–æ–±—ã—á–∞
    'inventory': 'üéí',    # –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    'quest': 'üìú',       # –∫–≤–µ—Å—Ç—ã
    'skills': 'üìä',       # –Ω–∞–≤—ã–∫–∏
    'mining': '‚öíÔ∏è',       # –≥–æ—Ä–Ω–æ–µ –¥–µ–ª–æ
    'herbalism': 'üå±',    # —Ç—Ä–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ
    'elementalism': 'üîÆ', # —ç–ª–µ–º–µ–Ω—Ç–∞–ª–∏–∑–º
    'monster': 'üëπ',      # –º–æ–Ω—Å—Ç—Ä
    'combat': '‚öîÔ∏è',       # –±–æ–π
    'back': '‚Ü©Ô∏è',         # –Ω–∞–∑–∞–¥
    'player': 'üë§',       # –∏–≥—Ä–æ–∫
    'common': '‚ö™',       # –æ–±—ã—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    'uncommon': 'üü¢',     # –Ω–µ–æ–±—ã—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    'rare': 'üîµ',         # —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç
    'epic': 'üü£',         # —ç–ø–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç
    'legendary': 'üü°',    # –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    'mythic': 'üî¥',       # –º–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç
    'npc': 'üë§',          # NPC
    'npc_trader': 'üí∞',  # —Ç–æ—Ä–≥–æ–≤–µ—Ü
    'npc_quest': 'üìù',   # –∫–≤–µ—Å—Ç–æ–≤—ã–π NPC
    'npc_dialogue': 'üí¨', # –¥–∏–∞–ª–æ–≥–æ–≤—ã–π NPC
    'experience': '‚ú®',    # –æ–ø—ã—Ç
    'money': 'üí∞',         # –¥–µ–Ω—å–≥–∏
    'item': 'üì¶',          # –ø—Ä–µ–¥–º–µ—Ç
    'skill': 'üîß',         # –Ω–∞–≤—ã–∫
    'book': 'üìñ',          # –∫–Ω–∏–≥–∞/–≥–ª–æ—Å—Å–∞—Ä–∏–π
    'compass': 'üß≠',       # –∫–æ–º–ø–∞—Å
}

class GameMenu:
    def __init__(self, game=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –∏–≥—Ä—ã"""
        self.game = game if game else None
        self.player = game.player if game else None
        self.running = True  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        self.debug_mode = False  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        self.is_running = False  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        self.is_in_main_menu = True  # –§–ª–∞–≥ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        self.should_exit = False  # –§–ª–∞–≥ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é
        self.title_color = Fore.CYAN
        self.selected_color = Fore.BLACK + Back.LIGHTBLACK_EX  # –ú–µ–Ω—è–µ–º CYAN –Ω–∞ LIGHTBLACK_EX –¥–ª—è —Å–µ—Ä–æ–≥–æ —Ñ–æ–Ω–∞
        self.normal_color = Fore.WHITE
        self.highlight_color = Fore.YELLOW
        self.resource_color = Fore.GREEN
        self.location_color = Fore.LIGHTBLUE_EX
        self.error_color = Fore.RED
        self.action_color = Fore.MAGENTA
        self.info_color = Fore.WHITE + Style.BRIGHT
        self.warning_color = Fore.YELLOW  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        handler = logging.FileHandler('game_menu.log')
        handler.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
    
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
        os.system('cls' if os.name == 'nt' else 'clear')
        
    def draw_box(self, width, title=None, color=None):
        """–†–∏—Å—É–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Ä–∞–º–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        if color is None:
            color = self.title_color
            
        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        if title:
            title_len = len(title) + 4  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            left_padding = (width - title_len) // 2
            right_padding = width - title_len - left_padding
            
            print(f"{color}{BOX_CHARS['tl_corner']}{BOX_CHARS['h_line'] * left_padding} {title} {BOX_CHARS['h_line'] * right_padding}{BOX_CHARS['tr_corner']}{Style.RESET_ALL}")
        else:
            print(f"{color}{BOX_CHARS['tl_corner']}{BOX_CHARS['h_line'] * (width-2)}{BOX_CHARS['tr_corner']}{Style.RESET_ALL}")
            
    def draw_bottom_box(self, width, color=None):
        """–†–∏—Å—É–µ—Ç –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Ä–∞–º–∫–∏"""
        if color is None:
            color = self.title_color
            
        print(f"{color}{BOX_CHARS['bl_corner']}{BOX_CHARS['h_line'] * (width-2)}{BOX_CHARS['br_corner']}{Style.RESET_ALL}")
        
    def draw_separator(self, width, color=None):
        """–†–∏—Å—É–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ —Ä–∞–º–∫–µ"""
        if color is None:
            color = self.title_color
            
        print(f"{color}{BOX_CHARS['lt_joint']}{BOX_CHARS['h_line'] * (width-2)}{BOX_CHARS['rt_joint']}{Style.RESET_ALL}")
        
    def print_header(self, title):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é —Å –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–º–∫–æ–π"""
        self.clear_screen()
        self.draw_box(80, title)
        print()
        
    def print_footer(self, help_text="‚Üë‚Üì: –í—ã–±–æ—Ä, Enter: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, Esc: –ù–∞–∑–∞–¥"):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏ –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–º–∫–æ–π"""
        print()
        self.draw_separator(80)
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {help_text:^76} {self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        self.draw_bottom_box(80)
        
        # –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ show_quest_path_in_footer –∏–∑ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
        # if self.game.tracked_quest_id:
        #     self.show_quest_path_in_footer()
    
    def get_key(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∂–∞—Ç—É—é –∫–ª–∞–≤–∏—à—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        try:
            if os.name == 'nt':  # Windows
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞
                while msvcrt.kbhit():
                    msvcrt.getch()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏—à—É
                key = msvcrt.getch()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ (—Å—Ç—Ä–µ–ª–∫–∏)
                if key == b'\xe0':
                    second_key = msvcrt.getch()
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥—ã –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if second_key == b'H':
                        return 'UP'
                    elif second_key == b'P':
                        return 'DOWN'
                    elif second_key == b'M':
                        return 'RIGHT'
                    elif second_key == b'K':
                        return 'LEFT'
                    return second_key  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ç–æ—Ä–æ–π –±–∞–π—Ç
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Enter, Escape –∏ –ø—Ä–æ–±–µ–ª
                if key == b'\r':
                    return 'ENTER'
                elif key == b'\x1b':
                    return 'ESC'
                elif key == b' ':
                    return 'SPACE'
                elif key == b'\x08':
                    return 'BACKSPACE'
                
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–ª–∞–≤–∏—à –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                try:
                    return key.decode('utf-8')
                except:
                    return key
                
            else:  # Linux/Mac
                key = readchar.readkey()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥—ã —Å—Ç—Ä–µ–ª–æ–∫
                if key == '\x1b[A':
                    return 'UP'
                elif key == '\x1b[B':
                    return 'DOWN'
                elif key == '\x1b[C':
                    return 'RIGHT'
                elif key == '\x1b[D':
                    return 'LEFT'
                elif key in ['\r', '\n']:
                    return 'ENTER'
                elif key == '\x1b':
                    return 'ESC'
                elif key == '\x7f' or key == '\b':
                    return 'BACKSPACE'
                
                return key
                
        except Exception as e:
            if self.debug_mode:
                print(f"–û—à–∏–±–∫–∞ –≤ get_key(): {e}")
            return None
    
    def show_menu(self, title, options, allow_cancel=True):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç"""
        current_option = 0
        
        while True:
            self.clear_screen()
            self.draw_box(80, title)
            
            for i, option in enumerate(options):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–ø—Ü–∏—è –∫–æ—Ä—Ç–µ–∂–µ–º
                display_text = option[1] if isinstance(option, (list, tuple)) else option
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                description = None
                if isinstance(option, (list, tuple)) and len(option) > 2:
                    description = option[2]
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
                if i == current_option:
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤
                    clean_text = display_text
                    if isinstance(clean_text, str):
                        for color_code in [self.resource_color, self.location_color, Fore.YELLOW, Fore.GREEN, Fore.RED, 
                                         Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE, Fore.LIGHTBLUE_EX,
                                         Fore.LIGHTGREEN_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTRED_EX, Fore.LIGHTMAGENTA_EX,
                                         Style.BRIGHT, Style.DIM]:
                            clean_text = clean_text.replace(color_code, '')
                        clean_text = clean_text.replace(Style.RESET_ALL, '')
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.selected_color} > {clean_text:<30} {Style.RESET_ALL}", end="")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    if description:
                        if isinstance(description, str):
                            # –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
                            print(f"{self.selected_color}{description}{Style.RESET_ALL}")
                        elif isinstance(description, tuple) and len(description) >= 5:
                            # –î–ª—è –∫–æ—Ä—Ç–µ–∂–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º 4 - –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
                            print(f"{self.selected_color}{description[4]}{Style.RESET_ALL}")
                        else:
                            print()
                else:
                    # –î–ª—è –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {display_text:<30}", end="")
                    
                    # –ò –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    if description:
                        if isinstance(description, str):
                            print(f"{self.info_color}{description}{Style.RESET_ALL}")
                        elif isinstance(description, tuple) and len(description) >= 5:
                            print(f"{self.info_color}{description[4]}{Style.RESET_ALL}")
                        else:
                            print()
            
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            
            if allow_cancel:
                self.draw_bottom_box(80, "–í—ã—Ö–æ–¥ - ESC")
            else:
                self.draw_bottom_box(80)
            
            key = self.get_key()
            
            if key in KEY_UP:
                current_option -= 1
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
                if current_option < 0:
                    current_option = len(options) - 1
            elif key in KEY_DOWN:
                current_option += 1
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                if current_option >= len(options):
                    current_option = 0
            elif key in KEY_ENTER:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
                selected = options[current_option]
                
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –∫–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
                if isinstance(selected, (list, tuple)) and len(selected) > 2 and isinstance(selected[2], tuple):
                    return selected[2]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
                elif isinstance(selected, (list, tuple)):
                    return selected[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID
                else:
                    return selected      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É –æ–ø—Ü–∏—é
            elif key in KEY_ESC and allow_cancel:
                return None
    
    def format_resource(self, resource_id, count):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏"""
        item_data = self.game.get_item(resource_id)
        if item_data and "name" in item_data:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
            rarity_color = Fore.WHITE  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π
            
            if "rarity" in item_data:
                rarity = item_data["rarity"]
                if rarity == "UNCOMMON":
                    rarity_color = Fore.GREEN
                elif rarity == "RARE":
                    rarity_color = Fore.LIGHTBLUE_EX
                elif rarity == "EPIC":
                    rarity_color = Fore.MAGENTA
                elif rarity == "LEGENDARY":
                    rarity_color = Fore.YELLOW
                elif rarity == "MYTHIC":
                    rarity_color = Fore.RED
                
            return f"{rarity_color}{item_data['name']}{Style.RESET_ALL} ({count})"
        return f"{resource_id} ({count})"
    
    def main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã"""
        while True:
            self.clear_screen()
            options = [
                "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                "–í—ã—Ö–æ–¥"
            ]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
            self.draw_box(80, "–≠–õ–¨–î–ê–†–ò–Ø: –•–†–û–ù–ò–ö–ò –ü–†–û–ë–£–ñ–î–ï–ù–ò–Ø")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.info_color}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≠–ª—å–¥–∞—Ä–∏–∏!{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            self.draw_separator(80)
            
            selected = 0
            while True:
                self.clear_screen()
                self.draw_box(80, "–≠–õ–¨–î–ê–†–ò–Ø: –•–†–û–ù–ò–ö–ò –ü–†–û–ë–£–ñ–î–ï–ù–ò–Ø")
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
                
                # –í—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
                for i, option in enumerate(options):
                    if i == selected:
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.selected_color}[{i+1}] {option}{Style.RESET_ALL}")
                    else:
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} [{i+1}] {option}")
                
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
                self.draw_bottom_box(80)
                
                key = self.get_key()
                if key in KEY_UP:
                    selected = (selected - 1) % len(options)
                elif key in KEY_DOWN:
                    selected = (selected + 1) % len(options)
                elif key in KEY_ENTER:
                    if selected == 0:
                        # –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
                        self.new_game()
                        return
                    elif selected == 1:
                        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É
                        if self.load_game_screen():
                            return
                    elif selected == 2:
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        self.settings_menu()
                    elif selected == 3:
                        # –í—ã—Ö–æ–¥
                        if self.confirm_exit():
                            return
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ —Ü–∏—Ñ—Ä–∞–º–∏
                elif key in ['1', '2', '3', '4']:
                    num = int(key) - 1
                    if num == 0:
                        self.new_game()
                        return
                    elif num == 1:
                        if self.load_game_screen():
                            return
                    elif num == 2:
                        self.settings_menu()
                    elif num == 3:
                        if self.confirm_exit():
                            return
                elif key in KEY_ESC:
                    if self.confirm_exit():
                        return
    
    def new_game(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–µ"""
        player_name = self.input_player_name()
        if not player_name:
            return False
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        self.game.player.name = player_name
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        self.game.is_new_game = True
        self.start_game()
        return True
    
    def input_player_name(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞"""
        self.clear_screen()
        self.draw_box(80, "–°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        self.draw_bottom_box(80)
        
        name = ""
        while True:
            self.clear_screen()
            self.draw_box(80, "–°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {name}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, Esc –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            self.draw_bottom_box(80)
            
            key = self.get_key()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            if key == 'ENTER' and name.strip():
                return name.strip()
            elif key == 'ESC':
                return None
            elif key == 'BACKSPACE':
                name = name[:-1]
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            elif len(key) == 1 and (key.isalnum() or key == '_' or key == ' '):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                if len(name) < 30:
                    name += key
        
        return None
    
    def load_game_screen(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        saves = self.game.get_saves_list()
        
        if not saves:
            self.show_message("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", self.error_color)
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –¥–ª—è –º–µ–Ω—é
        options = []
        for save in saves:
            playername = save.get("playername", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            player_level = save.get("player_level", 1)
            location = save.get("current_location", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            save_time = save.get("save_time", "")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            save_info = f"{playername} (–£—Ä. {player_level}) - {location}"
            save_description = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_time}"
            
            options.append((save["save_path"], save_info, save_description))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        options.append(("back", "‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ""))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        selected = self.show_save_menu("–ó–ê–ì–†–£–ó–ö–ê –ò–ì–†–´", options)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—ã—Ö–æ–¥ –∏–ª–∏ –Ω–∞–∂–∞–ª ESC
        if selected == "back" or selected is None:
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        loaded_game = self.game.load_game(selected)
        
        if loaded_game:
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π
            self.game = loaded_game
            self.player = loaded_game.player
            
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            self.game.is_new_game = False
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º preload –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ NPC –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–æ–≤
            self.game.preload()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            self.show_message(f"–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!", self.highlight_color)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
            self.start_game()
            return True
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            self.show_message("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ!", self.error_color)
            return False
    
    def show_save_menu(self, title, options):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
        current_option = 0
        
        while True:
            self.clear_screen()
            self.draw_box(80, title)
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {'–ü–ï–†–°–û–ù–ê–ñ':<25} {'–£–†–û–í–ï–ù–¨':<10} {'–õ–û–ö–ê–¶–ò–Ø':<20} {'–î–ê–¢–ê':<15}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {'-'*75}")
            
            for i, option in enumerate(options):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                save_path, display_text, description = option
                
                # –î–ª—è –æ–ø—Ü–∏–∏ "–ù–∞–∑–∞–¥" –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                if save_path == "back":
                    if i == current_option:
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.selected_color}{display_text}{Style.RESET_ALL}")
                    else:
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {display_text}")
                    continue
                
                # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π —Ä–∞–∑–±–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                if save_path != "back":
                    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    meta_file = os.path.join(save_path, "save_info.json")
                    try:
                        with open(meta_file, 'r', encoding='utf-8') as f:
                            meta_data = json.load(f)
                            
                        playername = meta_data.get("playername", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        player_level = meta_data.get("player_level", 1)
                        location = meta_data.get("current_location", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        save_time = meta_data.get("save_time", "")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                        if i == current_option:
                            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.selected_color}{playername:<25} {player_level:<10} {location:<20} {save_time:<15}{Style.RESET_ALL}")
                        else:
                            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {playername:<25} {player_level:<10} {location:<20} {save_time:<15}")
                    except Exception as e:
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                        if i == current_option:
                            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.selected_color}{display_text} (–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏){Style.RESET_ALL}")
                        else:
                            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {display_text} (–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏)")
            
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            self.draw_bottom_box(80)
            print(f"{Fore.CYAN}[‚Üë/‚Üì] –í—ã–±–æ—Ä [Enter] –ó–∞–≥—Ä—É–∑–∏—Ç—å [Esc] –ù–∞–∑–∞–¥{Style.RESET_ALL}")
            
            key = self.get_key()
            
            if key in KEY_UP:
                current_option -= 1
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
                if current_option < 0:
                    current_option = len(options) - 1
            elif key in KEY_DOWN:
                current_option += 1
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                if current_option >= len(options):
                    current_option = 0
            elif key in KEY_ENTER:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
                return options[current_option][0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º save_path
            elif key in KEY_ESC:
                return None
    
    def save_current_game(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
        # –ï—Å–ª–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        if not self.player.name or self.player.name == "Unknown":
            new_name = self.input_player_name()
            if new_name:
                self.player.name = new_name
            else:
                return False
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É –ø–æ–¥ –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º
        self.clear_screen()
        self.draw_box(80, "–°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ì–†–´")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –¢–µ–∫—É—â–µ–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {self.player.name}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É –ø–æ–¥ –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º? (Y/N)")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        self.draw_bottom_box(80)
        
        key = self.get_key()
        save_name = self.player.name
        
        if key.lower() == 'y':
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            new_save_name = self.input_save_name(default_name=self.player.name)
            if new_save_name:
                save_name = new_save_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
        if self.game.save_game(save_name):
            self.show_message(f"–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–¥ –∏–º–µ–Ω–µ–º '{save_name}'!", self.highlight_color)
            return True
        else:
            self.show_message("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É!", self.error_color)
            return False
            
    def input_save_name(self, default_name=""):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        self.clear_screen()
        self.draw_box(80, "–°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ì–†–´")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        self.draw_bottom_box(80)
        
        name = default_name
        while True:
            self.clear_screen()
            self.draw_box(80, "–°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ì–†–´")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {name}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, Esc –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            self.draw_bottom_box(80)
            
            key = self.get_key()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            if key == 'ENTER' and name.strip():
                return name.strip()
            elif key == 'ESC':
                return None
            elif key == 'BACKSPACE':
                name = name[:-1]
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            elif len(key) == 1 and (key.isalnum() or key == '_' or key == ' '):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                if len(name) < 30:
                    name += key
        
        return None
    
    def settings_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        options = [
            "–°–ª–æ–∂–Ω–æ—Å—Ç—å",
            "–ó–≤—É–∫–∏",
            "–ù–∞–∑–∞–¥"
        ]
        
        selected = self.show_menu("–ù–ê–°–¢–†–û–ô–ö–ò", options)
        
        if selected == "–°–ª–æ–∂–Ω–æ—Å—Ç—å":
            self.show_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏", self.info_color)
        elif selected == "–ó–≤—É–∫–∏":
            self.show_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏", self.info_color)
    
    def confirm_exit(self, message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã?"):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        self.clear_screen()
        self.draw_box(80, "–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {message}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} [Y] –î–∞     [N] –ù–µ—Ç")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        self.draw_bottom_box(80)
        
        key = self.get_key()
        return key.lower() in ['y']
        
    def auto_save_warning(self):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º"""
        self.clear_screen()
        self.draw_box(80, "–ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.warning_color}–í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Ç–µ—Ä—è–Ω.{Style.RESET_ALL}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        self.draw_bottom_box(80)
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        success = self.game.auto_save_game()
        
        if success:
            print(f"\n{self.normal_color}–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!{Style.RESET_ALL}")
        else:
            print(f"\n{self.warning_color}–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ!{Style.RESET_ALL}")
            
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    def start_game(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å"""
        # –î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        if self.game.is_new_game:
            self.clear_screen()
            self.draw_box(80, "–ù–ê–ß–ê–õ–û –ü–†–ò–ö–õ–Æ–ß–ï–ù–ò–Ø")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –≠–ª—å–¥–∞—Ä–∏–∏, {self.player.name}!")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –í–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            self.draw_bottom_box(80)
            print("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            self.get_key()
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        self.game_loop()
    
    def game_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        self.is_running = True
        
        while self.is_running:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            self.game.update()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
            self.game.update_quest_progress()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
            self.look_around()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞
            if not self.is_running:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                self.game.auto_save_game()
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
        if self.is_in_main_menu:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.main_menu()
        elif self.should_exit:
            # –í—ã—Ö–æ–¥–∏–º –∏–∑ –∏–≥—Ä—ã
            print(f"{self.normal_color}–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Style.RESET_ALL}")
            time.sleep(1.5)
            return
    
    def look_around(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö"""
        options = []
        display_options = []
        display_options_disabled = []

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–∫–∞—Ü–∏–∏ –ø–æ ID
        location_id = self.player.current_location
        location = self.game.get_location(location_id)
        
        if not location:
            print(f"–û—à–∏–±–∫–∞: –ª–æ–∫–∞—Ü–∏—è —Å ID {location_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
        self.clear_screen()
        
        # –†–∏—Å—É–µ–º –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —Ä–∞–º–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞—Ü–∏–∏
        self.draw_box(80, f"–õ–û–ö–ê–¶–ò–Ø: {location.name}")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        formatted_description = self.wrap_text(location.description, 70)
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {formatted_description}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º –∫–≤–µ—Å—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        has_tracked_quest = print_tracked_quest(self)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π —Ü–µ–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–≤–µ—Å—Ç–∞
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º –∫–≤–µ—Å—Ç—É
        has_tracked_target = False
        if not has_tracked_quest:
            has_tracked_target = print_tracked_target(self)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∫–≤–µ—Å—Ç –∏–ª–∏ —Ü–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if has_tracked_quest or has_tracked_target:
            self.draw_separator(80)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏
        connected_locations = []
        for loc_id in location.connected_locations:
            loc = self.game.get_location(loc_id)
            if loc:
                connected_locations.append((loc_id, loc.name))
                
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç–∏ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π —Ü–µ–ª–∏
        tracked_info = self.game.get_tracked_target_info()
        next_location_on_path = None
        is_quest_target = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã/NPC
        if tracked_info and tracked_info["path"]:
            next_location_on_path = tracked_info["path"][0]
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∫–≤–µ—Å—Ç
        quest_path = []
        if self.game.tracked_quest_id:
            quest_path = self.game.calculate_path_to_quest_target()
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Ç—å –∫ —Ü–µ–ª–∏ –∫–≤–µ—Å—Ç–∞ –∏ –Ω–µ—Ç –ø—É—Ç–∏ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π —Ü–µ–ª–∏,
            # –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ—Ç—Å—è –∫–≤–µ—Å—Ç—É
            if quest_path and (not next_location_on_path or not tracked_info):
                next_location_on_path = quest_path[0]
                is_quest_target = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥—Ä—É–≥–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        for loc_id, loc_name in connected_locations:
            options.append(("travel", loc_id))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏
            if loc_id == next_location_on_path:
                # –í—ã–¥–µ–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ —Å –∏–∫–æ–Ω–∫–æ–π –∫–æ–º–ø–∞—Å–∞
                compass_icon = "üß≠"  # –ò–∫–æ–Ω–∫–∞ –∫–æ–º–ø–∞—Å–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                
                # –†–∞–∑–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ –∫–≤–µ—Å—Ç–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π —Ü–µ–ª–∏
                if is_quest_target:
                    target_info = f"{Fore.LIGHTGREEN_EX}[‚ûú —Ü–µ–ª—å –∫–≤–µ—Å—Ç–∞]{Style.RESET_ALL}"
                else:
                    target_info = f"{Fore.LIGHTGREEN_EX}[‚ûú –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è —Ü–µ–ª—å: {tracked_info['name']}]{Style.RESET_ALL}"
                    
                display_options.append(f"{ICONS['travel']} {compass_icon} {Fore.LIGHTYELLOW_EX}{loc_name} {target_info}")
            else:
                display_options.append(f"{ICONS['travel']} –ò–¥—Ç–∏ –≤: {self.location_color}{loc_name}{Style.RESET_ALL}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        for res_id, count in location.resources.items():
            if count > 0:
                item_data = self.game.get_item(res_id)
                can_collect = True
                required_skills = {}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏
                if item_data and "required_skills" in item_data:
                    required_skills = item_data["required_skills"]
                    for skill_id, min_level in required_skills.items():
                        skill = self.player.skill_system.get_skill(skill_id)
                        if not skill or skill.level < min_level:
                            can_collect = False
                            break
                
                if can_collect:
                    options.append(("collect", res_id))
                    display_options.append(f"{ICONS['collect']} –î–æ–±—ã—Ç—å: {self.resource_color}{format_resource_name(self, res_id)}{Style.RESET_ALL} ({count})")
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –≤ —Å–µ—Ä–æ–º —Ü–≤–µ—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
                    missing_skills_info = ""
                    if required_skills:
                        missing_skills = []
                        for skill_id, min_level in required_skills.items():
                            skill = self.player.skill_system.get_skill(skill_id)
                            current_level = skill.level if skill else 0
                            if not skill or current_level < min_level:
                                skill_name = skill.name if skill else skill_id.capitalize()
                                missing_skills.append(f"{Fore.LIGHTRED_EX}[–¢–†–ï–ë–£–ï–¢–°–Ø {min_level} –Ω–∞–≤—ã–∫ {skill_name}]{Style.RESET_ALL}")
                        missing_skills_info = " ".join(missing_skills)
                    
                    display_options_disabled.append(f"{Fore.LIGHTBLACK_EX}{ICONS['collect']} –î–æ–±—ã—Ç—å: {format_resource_name(self, res_id)} ({count}){Style.RESET_ALL} {missing_skills_info}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º NPC –≤ –ª–æ–∫–∞—Ü–∏–∏
        npcs = self.game.get_npcs_at_location(location.id)
        # NPC –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø–æ–∑–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–° –∫–µ–º –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å NPC
        for npc in npcs:
            options.append(("talk", npc.id))
            npc_icon = ICONS['npc_trader'] if npc.type == 'trader' else ICONS['npc_quest'] if npc.type == 'quest' else ICONS['npc_dialogue']
            display_options.append(f"{ICONS['npc_dialogue']} –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å: {self.normal_color}{npc.name} {npc_icon}{Style.RESET_ALL}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ –ª–æ–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        monsters_in_location = location.monsters
        if monsters_in_location:
            print(f"\n{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}–°—É—â–µ—Å—Ç–≤–∞ –≤ –ª–æ–∫–∞—Ü–∏–∏:{Style.RESET_ALL}")
            for monster_id, count in monsters_in_location.items():
                if count > 0:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Å—Ç—Ä–µ
                    monster = self.game.get_monster(monster_id) if hasattr(self.game, 'get_monster') else None
                    monster_name = monster.name if monster else monster_id
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {ICONS['monster']} {monster_name} ({count})")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –±–æ—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤
            for monster_id, count in monsters_in_location.items():
                if count > 0:
                    monster = self.game.get_monster(monster_id) if hasattr(self.game, 'get_monster') else None
                    monster_name = monster.name if monster else monster_id
                    options.append(("combat", monster_id))
                    display_options.append(f"{ICONS['combat']} –ë–æ–π: {Fore.RED}{monster_name}{Style.RESET_ALL} ({count})")
                    
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –Ω–∞–≤—ã–∫–∞–º
        options.append(("skills", None))
        display_options.append(f"{ICONS['skills']} –ù–∞–≤—ã–∫–∏ (N)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é
        options.append(("inventory", None))
        display_options.append(f"{ICONS['inventory']} –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (I)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–≤–µ—Å—Ç–∞–º
        options.append(("quests", None))
        display_options.append(f"{ICONS['quest']} –ö–≤–µ—Å—Ç—ã (Q)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥–ª–æ—Å—Å–∞—Ä–∏—é
        options.append(("glossary", None))
        display_options.append(f"{ICONS['book']} –ì–ª–æ—Å—Å–∞—Ä–∏–π (G)")
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        if location.connected_locations:
            for i, (loc_id, loc_name) in enumerate(connected_locations):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏
                if loc_id == next_location_on_path:
                    # –í—ã–¥–µ–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ —Å –∏–∫–æ–Ω–∫–æ–π –∫–æ–º–ø–∞—Å–∞
                    compass_icon = "üß≠"  # –ò–∫–æ–Ω–∫–∞ –∫–æ–º–ø–∞—Å–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    
                    # –†–∞–∑–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ –∫–≤–µ—Å—Ç–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π —Ü–µ–ª–∏
                    if is_quest_target:
                        target_info = f"{Fore.LIGHTGREEN_EX}[‚ûú —Ü–µ–ª—å –∫–≤–µ—Å—Ç–∞]{Style.RESET_ALL}"
                    else:
                        target_info = f"{Fore.LIGHTGREEN_EX}[‚ûú –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è —Ü–µ–ª—å: {tracked_info['name']}]{Style.RESET_ALL}"
                        
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {i+1}. {ICONS['travel']} {compass_icon} {self.location_color}{loc_name}{Style.RESET_ALL} {target_info}")
                else:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {i+1}. {ICONS['travel']} {self.location_color}{loc_name}{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            
            # –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º –¥–µ–π—Å—Ç–≤–∏–π
            self.draw_separator(80)
        
        current_option = 0
        
        while True:
            self.clear_screen()
            
            # –†–∏—Å—É–µ–º –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —Ä–∞–º–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞—Ü–∏–∏
            self.draw_box(80, f"–õ–û–ö–ê–¶–ò–Ø: {location.name}")
            
            # –í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–º–∫–µ
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {location.description}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º –∫–≤–µ—Å—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            tracked_quest = self.game.get_tracked_quest()
            if tracked_quest:
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.LIGHTYELLOW_EX}üìå –ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: {tracked_quest.name}{Style.RESET_ALL}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–¥–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–µ–ª–∏
                current_stage = tracked_quest.get_current_stage()
                if current_stage:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.CYAN}–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {current_stage.name}{Style.RESET_ALL}")
                    progress_lines = tracked_quest.get_progress_text(self.game).split('\n')
                    for i, line in enumerate(progress_lines, 1):
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
                        colored_line = line
                        if "‚úÖ" in line:  # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                            colored_line = line.replace("‚úÖ", f"{Fore.GREEN}‚úÖ{Fore.RESET}")
                            colored_line = f"{Fore.GREEN}{colored_line}{Style.RESET_ALL}"
                        elif "‚ùå" in line:  # –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                            colored_line = line.replace("‚ùå", f"{Fore.RED}‚ùå{Fore.RESET}")
                            colored_line = f"{Fore.YELLOW}{colored_line}{Style.RESET_ALL}"
                        
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {i}. {colored_line}")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏ –∫–≤–µ—Å—Ç–∞
                location_id, target_name, target_type = self.game.get_tracked_quest_target_location()
                if location_id:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
                    path = self.game.calculate_path_to_quest_target()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
                    target_location = self.game.get_location(location_id)
                    location_name = target_location.name if target_location else location_id
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ü–µ–ª–∏
                    icon = ICONS['location']
                    if target_type == "npc":
                        icon = ICONS['npc']
                    elif target_type == "resource":
                        icon = ICONS['resource']
                        
                    
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.LIGHTGREEN_EX}–¶–µ–ª—å –∫–≤–µ—Å—Ç–∞:{Style.RESET_ALL} {icon} {Fore.LIGHTYELLOW_EX}{target_name}{Style.RESET_ALL} –≤ {Fore.LIGHTYELLOW_EX}{location_name}{Style.RESET_ALL}")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤ —Ç–æ–π –∂–µ –ª–æ–∫–∞—Ü–∏–∏
                    if path:
                        next_location = self.game.get_location(path[0])
                        next_location_name = next_location.name if next_location else path[0]
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.LIGHTCYAN_EX}–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:{Style.RESET_ALL} {Fore.LIGHTGREEN_EX}‚û§ {next_location_name}{Style.RESET_ALL} ({len(path)} –ø–µ—Ä–µ—Ö.)")
                    else:
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.GREEN}–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω—É–∂–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏!{Style.RESET_ALL}")
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—É—é —Ü–µ–ª—å –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è
            elif self.game.tracked_target:
                tracked_info = self.game.get_tracked_target_info()
                if tracked_info:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
                    
                    target_name = tracked_info["name"]
                    target_type = tracked_info["target_type"]
                    target_location = self.game.get_location(tracked_info["target_location"])
                    location_name = target_location.name if target_location else tracked_info["target_location"]
                    path = tracked_info["path"]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    icon = ICONS['resource'] if target_type == "resource" else ICONS['npc']
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.LIGHTYELLOW_EX}üìå –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è —Ü–µ–ª—å:{Style.RESET_ALL} {icon} {Fore.LIGHTYELLOW_EX}{target_name}{Style.RESET_ALL}")
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.LIGHTCYAN_EX}–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤:{Style.RESET_ALL} {Fore.LIGHTYELLOW_EX}{location_name}{Style.RESET_ALL}")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤ —Ç–æ–π –∂–µ –ª–æ–∫–∞—Ü–∏–∏
                    if path:
                        next_location = self.game.get_location(path[0])
                        next_location_name = next_location.name if next_location else path[0]
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.LIGHTCYAN_EX}–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:{Style.RESET_ALL} {Fore.LIGHTGREEN_EX}‚û§ {next_location_name}{Style.RESET_ALL} ({len(path)} –ø–µ—Ä–µ—Ö.)")
                    else:
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.GREEN}–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω—É–∂–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏!{Style.RESET_ALL}")
            
            # –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            self.draw_separator(80)
            
            # –í—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
            if location.resources:
                has_resources = False
                for res_id, count in location.resources.items():
                    if count > 0:
                        if not has_resources:
                            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}{ICONS['resource']} –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:{Style.RESET_ALL}")
                            has_resources = True
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
                        item_data = self.game.get_item(res_id)
                        can_collect = True
                        missing_skills_info = ""
                        
                        if item_data and "required_skills" in item_data:
                            for skill_id, min_level in item_data["required_skills"].items():
                                skill = self.player.skill_system.get_skill(skill_id)
                                if not skill or skill.level < min_level:
                                    can_collect = False
                                    skill_name = skill.name if skill else skill_id.capitalize()
                                    missing_skills_info = f" {Fore.LIGHTRED_EX}[–¢–†–ï–ë–£–ï–¢–°–Ø {min_level} –Ω–∞–≤—ã–∫ {skill_name}]{Style.RESET_ALL}"
                                    break
                        
                        if can_collect:
                            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {self.resource_color}{format_resource_name(self, res_id)}{Style.RESET_ALL} ({count})")
                        else:
                            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {Fore.LIGHTBLACK_EX}{format_resource_name(self, res_id)}{Style.RESET_ALL} ({count}){missing_skills_info}")
                
                if has_resources:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
                    
            # –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º –¥–µ–π—Å—Ç–≤–∏–π
            if location.connected_locations:
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}{ICONS['location']} –û—Ç—Å—é–¥–∞ –º–æ–∂–Ω–æ –ø–æ–π—Ç–∏ –≤:{Style.RESET_ALL}")
                for loc_id in location.connected_locations:
                    target_location = self.game.get_location(loc_id)
                    if target_location:
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {self.location_color}{target_location.name}{Style.RESET_ALL}")
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            
            # –í—ã–≤–æ–¥–∏–º NPC, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å
            npcs = self.game.get_npcs_at_location(location.id)
            if npcs:
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}{ICONS['npc']} –° –∫–µ–º –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å:{Style.RESET_ALL}")
                for npc in npcs:
                    npc_icon = ICONS['npc_trader'] if npc.type == 'trader' else ICONS['npc_quest'] if npc.type == 'quest' else ICONS['npc_dialogue']
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {npc_icon} {self.normal_color}{npc.name}{Style.RESET_ALL}")
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            
            # –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º –¥–µ–π—Å—Ç–≤–∏–π
            self.draw_separator(80)
            
            # –í—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:{Style.RESET_ALL}")
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
            for i, option in enumerate(display_options):
                if i == current_option:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ —á—ë—Ä–Ω—ã–º –Ω–∞ —Å–µ—Ä–æ–º —Ñ–æ–Ω–µ
                    clean_option = option
                    for color_code in [self.resource_color, self.location_color, Fore.YELLOW, Fore.GREEN, Fore.RED, 
                                      Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE, Fore.LIGHTBLUE_EX,
                                      Fore.LIGHTGREEN_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTRED_EX, Fore.LIGHTMAGENTA_EX,
                                      Style.BRIGHT, Style.DIM]:
                        clean_option = clean_option.replace(color_code, '')
                    clean_option = clean_option.replace(Style.RESET_ALL, '')
                    
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.selected_color} ‚ùØ {clean_option} {Style.RESET_ALL}")
                else:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {option}")
            
            # –ó–∞—Ç–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
            for option in display_options_disabled:
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {option}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å
            self.draw_bottom_box(80)
            # –í—ã–≤–æ–¥ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            print(f"{Fore.CYAN}[‚Üë/‚Üì] –í—ã–±–æ—Ä [Enter] –î–µ–π—Å—Ç–≤–∏–µ [1-9] –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ [I] –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å [E] –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ [Q] –ö–≤–µ—Å—Ç—ã [N] –ù–∞–≤—ã–∫–∏ [G] –ì–ª–æ—Å—Å–∞—Ä–∏–π [Esc] –í—ã—Ö–æ–¥{Style.RESET_ALL}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π footer
            self.print_footer()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–ª–∞–≤–∏—à—É
            key = self.get_key()
            
            if key == 'UP' or key == 'W':
                current_option -= 1
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
                if current_option < 0:
                    current_option = len(options) - 1
            elif key == 'DOWN' or key == 'S':
                current_option += 1
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                if current_option >= len(options):
                    current_option = 0
            elif key == 'ENTER':
                action_type, action_id = options[current_option]
                
                if action_type == "travel":
                    self.player.move_to(self.game, action_id)
                    location = self.player.current_location
                    return self.look_around()
                    
                elif action_type == "collect":
                    resource_count = location.resources.get(action_id, 0)
                    if resource_count > 0:
                        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–æ —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
                        progress_before = {}
                        for quest_id, quest in self.game.active_quests.items():
                            current_stage = quest.get_current_stage()
                            if current_stage:
                                progress_before[quest_id] = current_stage.get_progress_text()
                        
                        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å
                        self.player.collect_resource(self.game, action_id, resource_count)
                        print(f"{self.highlight_color}–í—ã —Å–æ–±—Ä–∞–ª–∏ {resource_count} {format_resource_name(self, action_id)}{Style.RESET_ALL}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if self.game.update_quest_progress():
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω—ã –ª–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∫–≤–µ—Å—Ç–∞–º–∏
                            for quest_id, quest in self.game.active_quests.items():
                                current_stage = quest.get_current_stage()
                                if current_stage and quest_id in progress_before:
                                    new_progress = current_stage.get_progress_text()
                                    if new_progress != progress_before[quest_id]:
                                        print(f"{Fore.LIGHTYELLOW_EX}‚ú® –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞: {quest.name}{Style.RESET_ALL}")
                                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π
                                        progress_lines = new_progress.split('\n')
                                        for line in progress_lines:
                                            if action_id.lower() in line.lower() and "‚úÖ" in line:
                                                print(f"  {Fore.GREEN}{line}{Style.RESET_ALL}")
                                            elif action_id.lower() in line.lower():
                                                print(f"  {Fore.YELLOW}{line}{Style.RESET_ALL}")
                        
                        time.sleep(1.5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                        return self.look_around()
                    
                elif action_type == "skills":
                    show_skills(self)
                
                elif action_type == "inventory":
                    show_inventory(self)
                
                elif action_type == "quests":
                    show_quests(self)
                    return self.look_around()
                
                elif action_type == "glossary":
                    show_glossary(self)
                    return self.look_around()
                
                elif action_type == "talk":
                    npc = self.game.get_npc(action_id)
                    if npc:
                        talk_to_npc(self, npc)
                        return self.look_around()
                
                elif action_type == "combat":
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–π —Å –º–æ–Ω—Å—Ç—Ä–æ–º
                    monster_defeated = start_combat(self, action_id)
                    
                    # –ï—Å–ª–∏ –º–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏
                    location_id = self.player.current_location
                    location = self.game.get_location(location_id)
                    
                    if monster_defeated and action_id in location.monsters:
                        location.monsters[action_id] -= 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –Ω–∞–¥ –º–æ–Ω—Å—Ç—Ä–æ–º
                        self.game.update_quest_progress()
                    
                    return self.look_around()
                
            elif key == 'ESC': # –£–¥–∞–ª–∏–ª–∏ 'or key == 'Q'
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–∞—É–∑—ã
                self.pause_menu()
                return
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            elif key == 'N' or key == 'n':  # –ù–∞–≤—ã–∫–∏
                show_skills(self)
                return self.look_around()
            elif key == 'I' or key == 'i':  # –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
                show_inventory(self)
                return self.look_around()
            elif key == 'Q' or key == 'q':  # –ö–≤–µ—Å—Ç—ã
                show_quests(self)
                return self.look_around()
            elif key == 'G' or key == 'g':  # –ì–ª–æ—Å—Å–∞—Ä–∏–π
                show_glossary(self)
                return self.look_around()
            elif key == 'E' or key == 'e' or key == '–µ':  # –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ (–µ - —Ä—É—Å—Å–∫–∞—è e)
                show_equipment(self)
                return self.look_around()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –ª–æ–∫–∞—Ü–∏–∏
            elif key in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–ª–∞–≤–∏—à—É –≤ –∏–Ω–¥–µ–∫—Å (—Å —É—á–µ—Ç–æ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
                location_index = int(key) - 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º
                if location_index >= 0 and location_index < len(connected_locations):
                    # –ü–æ–ª—É—á–∞–µ–º ID –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è —Ç—É–¥–∞
                    location_id = connected_locations[location_index][0]
                    self.player.move_to(self.game, location_id)
                    location_id = self.player.current_location
                    location = self.game.get_location(location_id)
                    return self.look_around()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        self.game.update()
    
    def exit_game(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        self.clear_screen()
        self.draw_box(80, "–í–´–•–û–î –ò–ó –ò–ì–†–´")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º? (Y/N)")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        self.draw_bottom_box(80)
        
        key = self.get_key()
        if key.lower() == 'y':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
            self.save_current_game()
        
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤—ã—Ö–æ–¥–∏–º
        self.running = False
        return True
    
    def wrap_text(self, text, max_width=70, indent=0):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        
        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            max_width (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
            indent (int): –û—Ç—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        """
        if not text:
            return ""
        
        words = text.split()
        lines = []
        current_line = []
        current_length = 0
        
        for word in words:
            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤, —á–µ–º –æ—Å—Ç–∞–≤—à–∞—è—Å—è —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
            if current_length + len(word) + (1 if current_line else 0) > max_width:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                if current_line:
                    lines.append(" ".join(current_line))
                current_line = [word]
                current_length = len(word)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
                if current_line:
                    current_length += 1  # –ü—Ä–æ–±–µ–ª
                current_length += len(word)
                current_line.append(word)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        if current_line:
            lines.append(" ".join(current_line))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        if not lines:
            return ""
        
        result = lines[0]
        indent_str = " " * indent
        
        for line in lines[1:]:
            result += f"\n{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {indent_str}{line}"
        
        return result

    def create_progress_bar(self, current, maximum, width=20, color=Fore.GREEN):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∏ —Ü–≤–µ—Ç–∞
        
        Args:
            current (int): –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            maximum (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            width (int): –®–∏—Ä–∏–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
            color (str): –¶–≤–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            
        Returns:
            str: –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        if maximum <= 0:
            percent = 100
        else:
            percent = min(100, int((current / maximum) * 100))
        
        filled_width = int(width * percent / 100)
        empty_width = width - filled_width
        
        bar = f"{color}{'‚ñà' * filled_width}{Style.RESET_ALL}{'‚ñë' * empty_width}"
        return bar

    def get_rarity_color(self, rarity):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        rarity_colors = {
            "COMMON": Fore.WHITE,
            "UNCOMMON": Fore.GREEN,
            "RARE": Fore.LIGHTBLUE_EX, 
            "EPIC": Fore.MAGENTA,
            "LEGENDARY": Fore.YELLOW,
            "MYTHIC": Fore.RED
        }
        return rarity_colors.get(rarity, Fore.WHITE)
    
    def show_message(self, message, color=None, wait_key=True):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            color: –¶–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–ª—ã–π)
            wait_key: –û–∂–∏–¥–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        """
        if color is None:
            color = Fore.WHITE
            
        self.clear_screen()
        self.draw_box(80, "–°–æ–æ–±—â–µ–Ω–∏–µ")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {color}{message}{Style.RESET_ALL}")
        self.draw_bottom_box(80)
        
        if wait_key:
            print(f"{self.title_color}–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Style.RESET_ALL}")
            self.get_key() 

    def pause_menu(self):
        """–ú–µ–Ω—é –ø–∞—É–∑—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã"""
        options = [
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏ –º–µ–Ω—é
        icons = {
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å": "‚ñ∂Ô∏è",
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É": "üíæ",
            "–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "üè†",
            "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã": "üö™"
        }
        
        current_option = 0
        
        while True:
            self.clear_screen()
            
            # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é
            self.draw_box(80, "–ü–ê–£–ó–ê")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã—à–µ –æ–ø—Ü–∏–π
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}–ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{Style.RESET_ALL}")
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            self.draw_separator(80)
            
            # –í—ã–≤–æ–¥–∏–º –æ–ø—Ü–∏–∏ –º–µ–Ω—é –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            for i, option in enumerate(options):
                icon = icons.get(option, "üîπ")
                
                if i == current_option:
                    # –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {self.selected_color} {icon} {option} {Style.RESET_ALL}")
                else:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}     {icon} {self.normal_color}{option}{Style.RESET_ALL}")
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –æ–ø—Ü–∏—è–º–∏
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
                
            # –†–∏—Å—É–µ–º –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –º–µ–Ω—é
            self.draw_bottom_box(80)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            print(f"{self.title_color}[‚Üë/‚Üì] –ù–∞–≤–∏–≥–∞—Ü–∏—è [Enter] –í—ã–±—Ä–∞—Ç—å [Esc] –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É{Style.RESET_ALL}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            key = self.get_key()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            if key == 'UP':
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –ø–æ –º–µ–Ω—é
                current_option = (current_option - 1) % len(options)
            elif key == 'DOWN':
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤–Ω–∏–∑ –ø–æ –º–µ–Ω—é
                current_option = (current_option + 1) % len(options)
            elif key == 'ENTER':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                if options[current_option] == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
                    return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ–Ω—é –ø–∞—É–∑—ã
                elif options[current_option] == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É":
                    self.save_current_game()
                    return
                elif options[current_option] == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                    self.settings_menu()
                elif options[current_option] == "–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                    if self.confirm_exit("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?"):
                        self.auto_save_warning()
                        self.is_running = False
                        self.is_in_main_menu = True
                        return
                elif options[current_option] == "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã":
                    if self.confirm_exit("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã?"):
                        self.auto_save_warning()
                        self.is_running = False
                        self.should_exit = True
                        return
            elif key == 'ESC':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏–≥—Ä—É
                return
                
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É" –∏–ª–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–∞—É–∑—ã —Å–Ω–æ–≤–∞
            if key in KEY_ENTER and options[current_option] in ["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"] and self.running:
                continue 