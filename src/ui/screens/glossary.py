from time import time
from colorama import Fore, Style

def show_glossary(self):
    from src.ui.GameMenu import BOX_CHARS, ICONS
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–æ—Å—Å–∞—Ä–∏–π –∏–≥—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    current_tab = 0
    tabs = ["–†–µ—Å—É—Ä—Å—ã", "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏"]
    search_query = ""
    search_mode = False
    
    # –°–ø–∏—Å–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    selectable_items = []
    current_selection = 0
    
    while self.running:
        self.clear_screen()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        if current_tab == 0:  # –†–µ—Å—É—Ä—Å—ã
            all_items = self.game.get_glossary_resources()
        else:  # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
            all_items = self.game.get_glossary_npcs()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
        filtered_items = {}
        if search_query:
            for item_id, item_info in all_items.items():
                if (search_query.lower() in item_id.lower() or 
                        search_query.lower() in item_info['name'].lower() or
                        search_query.lower() in item_info['description'].lower()):
                    filtered_items[item_id] = item_info
            display_items = filtered_items
        else:
            display_items = all_items
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        selectable_items = list(display_items.keys())
        if selectable_items and current_selection >= len(selectable_items):
            current_selection = len(selectable_items) - 1
        
        # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.draw_box(80, "–ì–õ–û–°–°–ê–†–ò–ô")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        if search_mode:
            search_color = self.highlight_color
        else:
            search_color = self.normal_color
            
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {search_color}–ü–æ–∏—Å–∫: {search_query + '‚ñå' if search_mode else search_query}{Style.RESET_ALL}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tab_line = ""
        for i, tab in enumerate(tabs):
            if i == current_tab:
                tab_line += f"{self.selected_color} [{tab}] {Style.RESET_ALL}"
            else:
                tab_line += f" {tab} "
        
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {tab_line}")
        
        if search_query and not display_items:
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.info_color}–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}'{Style.RESET_ALL}")
        
        self.draw_separator(80)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        if not display_items:
            if current_tab == 0:
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.normal_color}–í –≥–ª–æ—Å—Å–∞—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.{Style.RESET_ALL}")
            else:
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.normal_color}–í –≥–ª–æ—Å—Å–∞—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.{Style.RESET_ALL}")
        else:
            for i, (item_id, item_info) in enumerate(display_items.items()):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å—Ç–∏–ª—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                if i == current_selection and selectable_items:
                    item_style = self.selected_color
                    prefix = "‚û§ "
                    highlight_box = True
                else:
                    item_style = self.highlight_color
                    prefix = "  "
                    highlight_box = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
                is_tracked = (self.game.tracked_target == item_id and 
                                ((current_tab == 0 and self.game.tracked_target_type == "resource") or
                                (current_tab == 1 and self.game.tracked_target_type == "npc")))
                
                track_indicator = "üîç " if is_tracked else ""
                
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏-—Ä–∞–º–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                if highlight_box:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {prefix}{self.selected_color}‚îå‚îÄ{'‚îÄ' * (len(item_info['name']) + len(track_indicator) + 2)}‚îê{Style.RESET_ALL}")
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {prefix}{self.selected_color}‚îÇ {track_indicator}{item_info['name']} ‚îÇ{Style.RESET_ALL}")
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {prefix}{self.selected_color}‚îî‚îÄ{'‚îÄ' * (len(item_info['name']) + len(track_indicator) + 2)}‚îò{Style.RESET_ALL}")
                else:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {prefix}{item_style}{track_indicator}{item_info['name']}{Style.RESET_ALL}")
                
                # –û–ø–∏—Å–∞–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–æ–º –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
                wrapped_desc = self.wrap_text(item_info['description'], 70, 5)
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}     {Fore.LIGHTCYAN_EX}–û–ø–∏—Å–∞–Ω–∏–µ:{Style.RESET_ALL} {wrapped_desc}")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
                if current_tab == 0:  # –î–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
                    if item_info["locations"]:
                        location_names = []
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å
                        is_resource_tracked = (self.game.tracked_target == item_id and 
                                                self.game.tracked_target_type == "resource")
                        
                        for loc_id in item_info["locations"]:
                            location = self.game.get_location(loc_id)
                            loc_name = location.name if location else loc_id
                            
                            # –ï—Å–ª–∏ —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∏ —ç—Ç–∞ –ª–æ–∫–∞—Ü–∏—è —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å
                            if is_resource_tracked and loc_id == self.game.tracked_location:
                                loc_name = f"{loc_name} {Fore.LIGHTGREEN_EX}[‚üê —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å]{Style.RESET_ALL}"
                            
                            location_names.append(loc_name)
                        
                        location_str = ", ".join(location_names)
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}     {Fore.LIGHTYELLOW_EX}–ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤:{Style.RESET_ALL} {location_str}")
                    else:
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}     {Fore.LIGHTYELLOW_EX}–ú–µ—Å—Ç–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:{Style.RESET_ALL} {Fore.LIGHTRED_EX}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ{Style.RESET_ALL}")
                else:  # –î–ª—è NPC
                    if item_info["location"]:
                        location = self.game.get_location(item_info["location"])
                        location_name = location.name if location else item_info["location"]
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ—Ç NPC –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
                        if (self.game.tracked_target == item_id and 
                            self.game.tracked_target_type == "npc"):
                            location_name = f"{location_name} {Fore.LIGHTGREEN_EX}[‚üê —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å]{Style.RESET_ALL}"
                            
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}     {Fore.LIGHTYELLOW_EX}–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤:{Style.RESET_ALL} {location_name}")
                    else:
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}     {Fore.LIGHTYELLOW_EX}–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:{Style.RESET_ALL} {Fore.LIGHTRED_EX}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ{Style.RESET_ALL}")
                
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∂–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
        self.draw_separator(80)
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} [‚Üê][‚Üí] –í–∫–ª–∞–¥–∫–∏ | [‚Üë][‚Üì] –í—ã–±–æ—Ä | [Y] –û—Ç—Å–ª–µ–¥–∏—Ç—å | [/] –ü–æ–∏—Å–∫ | [ESC] –ù–∞–∑–∞–¥")
        self.draw_bottom_box(80)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–ª–∞–≤–∏—à—É
        if search_mode:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
            key = input()
            if key == "":
                # Enter –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
                search_mode = False
                current_selection = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            elif key.lower() == "esc" or key == "\x1b":
                # Escape –æ—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
                search_mode = False
                search_query = ""
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞
                search_query = key
            continue
        
        key = self.get_key()
        
        if key == 'LEFT':
            current_tab = (current_tab - 1) % len(tabs)
            current_selection = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
        elif key == 'RIGHT':
            current_tab = (current_tab + 1) % len(tabs)
            current_selection = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
        elif key == 'UP' and selectable_items:
            current_selection = (current_selection - 1) % len(selectable_items)
        elif key == 'DOWN' and selectable_items:
            current_selection = (current_selection + 1) % len(selectable_items)
        elif key == '/' or key == '?':
            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
            search_mode = True
            search_query = ""
        elif key in ['y', 'Y'] and selectable_items:
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            selected_id = selectable_items[current_selection]
            target_type = "resource" if current_tab == 0 else "npc"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            if (self.game.tracked_target == selected_id and 
                ((current_tab == 0 and self.game.tracked_target_type == "resource") or
                    (current_tab == 1 and self.game.tracked_target_type == "npc"))):
                # –ï—Å–ª–∏ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–º–µ–Ω—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                self.game.untrack_target()
            else:
                # –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
                success = self.game.track_target(selected_id, target_type)
                if not success:
                    print(f"{self.error_color}–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç.{Style.RESET_ALL}")
                    time.sleep(1)
        elif key in ['\x1b', 'q', 'Q', 'ESC']:
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –≥–ª–æ—Å—Å–∞—Ä–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ESC