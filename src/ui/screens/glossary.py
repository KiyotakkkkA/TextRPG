from time import time
from colorama import Fore, Style

def show_glossary(self):
    from src.ui.GameMenu import BOX_CHARS, ICONS
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–æ—Å—Å–∞—Ä–∏–π –∏–≥—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    current_tab = 0
    tabs = ["–†–µ—Å—É—Ä—Å—ã", "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏", "–ú–æ–Ω—Å—Ç—Ä—ã"]
    search_query = ""
    search_mode = False
    
    # –°–ø–∏—Å–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    selectable_items = []
    current_selection = 0
    
    while self.running:
        self.clear_screen()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        if current_tab == 0:  # –†–µ—Å—É—Ä—Å—ã
            all_items = self.game.get_glossary_resources()
        elif current_tab == 1:  # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
            all_items = self.game.get_glossary_npcs()
        else:  # –ú–æ–Ω—Å—Ç—Ä—ã
            all_items = self.game.get_glossary_monsters()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
        filtered_items = {}
        if search_query:
            for item_id, item_info in all_items.items():
                if (search_query.lower() in item_id.lower() or 
                        search_query.lower() in item_info['name'].lower() or
                        search_query.lower() in item_info['description'].lower()):
                    filtered_items[item_id] = item_info
            display_items = filtered_items
        else:
            display_items = all_items
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        selectable_items = list(display_items.keys())
        if selectable_items and current_selection >= len(selectable_items):
            current_selection = len(selectable_items) - 1
        
        # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.draw_box(80, "–ì–õ–û–°–°–ê–†–ò–ô")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        if search_mode:
            search_color = self.highlight_color
        else:
            search_color = self.normal_color
            
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} " +
              f"{search_color}–ü–æ–∏—Å–∫:{Style.RESET_ALL} {search_query}" + 
              " " * (70 - len(search_query) - 7))
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.draw_separator(80)
        tab_line = f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} "
        for i, tab in enumerate(tabs):
            if i == current_tab:
                tab_line += f"{self.selected_color}{tab}{Style.RESET_ALL} | "
            else:
                tab_line += f"{self.normal_color}{tab}{Style.RESET_ALL} | "
        print(tab_line.rstrip('| '))
        
        self.draw_separator(80)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π —Ü–µ–ª–∏
        tracked_info = self.game.get_tracked_target_info()
        tracked_target_id = tracked_info["target_id"] if tracked_info else None
        tracked_target_type = tracked_info["target_type"] if tracked_info else None
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if not display_items:
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} " +
                  f"{self.error_color}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π{Style.RESET_ALL}")
        else:
            for i, (item_id, item_info) in enumerate(display_items.items()):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
                if current_tab == 0:  # –†–µ—Å—É—Ä—Å—ã
                    icon = ICONS.get('resource', 'üì¶')
                    current_type = "resource"
                elif current_tab == 1:  # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
                    icon = ICONS.get('npc', 'üë§')
                    current_type = "npc"
                else:  # –ú–æ–Ω—Å—Ç—Ä—ã
                    icon = ICONS.get('monster', 'üëπ')
                    current_type = "monster"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ª—É–ø—ã, –µ—Å–ª–∏ —ç—Ç–∞ —Ü–µ–ª—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
                is_tracked = (tracked_target_id == item_id and tracked_target_type == current_type)
                track_icon = "üîç " if is_tracked else ""
                
                if i == current_selection:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} " +
                          f"{self.selected_color}‚ùØ {track_icon}{icon} {item_info['name']}{Style.RESET_ALL}")
                else:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   " +
                          f"{track_icon}{icon} {item_info['name']}")
        
        self.draw_separator(80)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        if selectable_items and current_selection < len(selectable_items):
            selected_id = selectable_items[current_selection]
            selected_item = display_items[selected_id]
            
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} " +
                  f"{self.highlight_color}{selected_item['name']} ({selected_id}){Style.RESET_ALL}")
            
            # –û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            description = selected_item.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 70 —Å–∏–º–≤–æ–ª–æ–≤
            desc_lines = [description[i:i+70] for i in range(0, len(description), 70)]
            for line in desc_lines:
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {line}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
            if current_tab == 0:  # –†–µ—Å—É—Ä—Å—ã
                locations = selected_item.get('locations', [])
                if locations:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} ")
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} " +
                          f"{self.highlight_color}–í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –ª–æ–∫–∞—Ü–∏—è—Ö:{Style.RESET_ALL}")
                    for loc_id in locations:
                        loc = self.game.get_location(loc_id)
                        loc_name = loc.name if loc else loc_id
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   " +
                              f"{ICONS.get('location', 'üó∫Ô∏è')} {loc_name}")
            
            elif current_tab == 1:  # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
                location_id = selected_item.get('location')
                if location_id:
                    loc = self.game.get_location(location_id)
                    loc_name = loc.name if loc else location_id
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} ")
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} " +
                          f"{self.highlight_color}–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤:{Style.RESET_ALL} " +
                          f"{ICONS.get('location', 'üó∫Ô∏è')} {loc_name}")
            
            else:  # –ú–æ–Ω—Å—Ç—Ä—ã
                level = selected_item.get('level', 1)
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} ")
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} " +
                      f"{self.highlight_color}–£—Ä–æ–≤–µ–Ω—å:{Style.RESET_ALL} {level}")
                
                locations = selected_item.get('locations', [])
                if locations:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} ")
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} " +
                          f"{self.highlight_color}–í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –ª–æ–∫–∞—Ü–∏—è—Ö:{Style.RESET_ALL}")
                    for loc_id in locations:
                        loc = self.game.get_location(loc_id)
                        loc_name = loc.name if loc else loc_id
                        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   " +
                              f"{ICONS.get('location', 'üó∫Ô∏è')} {loc_name}")
        
        self.draw_separator(80)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} " +
              f"{self.normal_color}‚Üê‚Üí: –°–º–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∏ | " +
              f"‚Üë‚Üì: –ù–∞–≤–∏–≥–∞—Ü–∏—è | " +
              f"Y: –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å | " +
              f"S: –ü–æ–∏—Å–∫ | " +
              f"Esc: –ù–∞–∑–∞–¥{Style.RESET_ALL}")
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Ä–∞–º–∫–∏
        self.draw_bottom_box(80)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        key = self.get_key()
        
        if key == 'ESC':
            if search_mode:
                search_mode = False
                search_query = ""
            else:
                break
        
        elif key == 'LEFT' and not search_mode:
            current_tab = (current_tab - 1) % len(tabs)
            current_selection = 0
        
        elif key == 'RIGHT' and not search_mode:
            current_tab = (current_tab + 1) % len(tabs)
            current_selection = 0
        
        elif key == 'UP' and not search_mode:
            if selectable_items:
                current_selection = (current_selection - 1) % len(selectable_items)
        
        elif key == 'DOWN' and not search_mode:
            if selectable_items:
                current_selection = (current_selection + 1) % len(selectable_items)
        
        elif (key == 'Y' or key == 'y') and not search_mode:
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏
            if selectable_items and current_selection < len(selectable_items):
                selected_id = selectable_items[current_selection]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
                if current_tab == 0:  # –†–µ—Å—É—Ä—Å—ã
                    target_type = "resource"
                elif current_tab == 1:  # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
                    target_type = "npc"
                else:  # –ú–æ–Ω—Å—Ç—Ä—ã
                    target_type = "monster"
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ —Å–Ω–∏–º–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                is_currently_tracked = (tracked_target_id == selected_id and tracked_target_type == target_type)
                item_name = display_items[selected_id].get('name', selected_id)
                tracking_result = self.game.track_target(selected_id, target_type)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–Ω—è—Ç–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                if is_currently_tracked:
                    self.show_message(f"{Fore.CYAN}–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ {item_name} –æ—Ç–º–µ–Ω–µ–Ω–æ!{Style.RESET_ALL}")
                elif tracking_result:
                    self.show_message(f"{Fore.GREEN}–¶–µ–ª—å {item_name} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è!{Style.RESET_ALL}")
                else:
                    self.show_message(f"{Fore.RED}–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–ª—å {item_name}!{Style.RESET_ALL}")
            else:
                self.show_message(f"{Fore.RED}–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!{Style.RESET_ALL}")
        
        elif key == 'S' or key == 's':
            search_mode = not search_mode
            if not search_mode:
                search_query = ""
        
        elif search_mode:
            if key == 'BACKSPACE':
                search_query = search_query[:-1]
            elif key == 'ENTER':
                search_mode = False
            elif len(key) == 1:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—á–∞—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
                search_query += key