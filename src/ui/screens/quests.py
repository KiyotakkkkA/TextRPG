from colorama import Fore, Style

def show_quests(self):
    from src.ui.GameMenu import BOX_CHARS, ICONS
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤"""
    current_option = 0
    back_option = False
    
    while self.running:
        self.clear_screen()
        
        self.draw_box(80, "–ö–í–ï–°–¢–´")
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {ICONS['player']} {self.highlight_color}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:{Style.RESET_ALL}")
    
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
        hp_bar = self.create_progress_bar(self.player.health, self.player.max_health, 15, Fore.RED)
        mp_bar = self.create_progress_bar(self.player.mana, self.player.max_mana, 15, Fore.BLUE)
        sp_bar = self.create_progress_bar(self.player.stamina, self.player.max_stamina, 15, Fore.GREEN)
        xp_bar = self.create_progress_bar(self.player.experience, self.player.exp_to_next_level, 15, Fore.YELLOW)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
        hp_text = f"{self.player.health}/{self.player.max_health}"
        mp_text = f"{self.player.mana}/{self.player.max_mana}"
        sp_text = f"{self.player.stamina}/{self.player.max_stamina}"
        xp_text = f"{self.player.experience}/{self.player.exp_to_next_level}"
        
        col_width = 25  # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.RED}{'–ó–¥–æ—Ä–æ–≤—å–µ:':<10}{Style.RESET_ALL} {hp_bar} {hp_text:<8}", end="")
        print(f"{Fore.BLUE}{'–ú–∞–Ω–∞:':<10}{Style.RESET_ALL} {mp_bar} {mp_text:<8}")
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.GREEN}{'–í—ã–Ω–æ—Å–ª.:':<10}{Style.RESET_ALL} {sp_bar} {sp_text:<8}", end="")
        print(f"{Fore.YELLOW}{'–û–ø—ã—Ç:':<10}{Style.RESET_ALL} {xp_bar} {xp_text:<8}")
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å —É—Ä–æ–≤–Ω–µ–º –∏ –¥–µ–Ω—å–≥–∞–º–∏
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.CYAN}{'–£—Ä–æ–≤–µ–Ω—å:':<10}{Style.RESET_ALL} {self.player.level:<23}", end="")
        print(f"{Fore.YELLOW}{'–î–µ–Ω—å–≥–∏:':<10}{Style.RESET_ALL} {self.player.money} –º–æ–Ω–µ—Ç")
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
        self.draw_separator(80)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∫–≤–µ—Å—Ç–æ–≤
        active_quests = list(self.game.active_quests.values())
        completed_quests = list(self.game.completed_quests.values())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π
        options = []
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
        if active_quests:
            options.append(("header", "–ê–ö–¢–ò–í–ù–´–ï –ö–í–ï–°–¢–´"))
            for quest in active_quests:
                tracked_text = "üìå " if self.game.tracked_quest_id == quest.id else ""
                options.append(("active", f"{tracked_text}{quest.name}", quest))
        else:
            options.append(("empty", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤"))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        options.append(("separator", ""))
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
        if completed_quests:
            options.append(("header", "–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ö–í–ï–°–¢–´"))
            for quest in completed_quests:
                options.append(("completed", f"{quest.name}", quest))
        else:
            options.append(("empty", "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–∞–∑–∞–¥"
        options.append(("separator", ""))
        options.append(("back", "–ù–∞–∑–∞–¥"))
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
        for i, (option_type, option_text, *args) in enumerate(options):
            if option_type == "header":
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}{option_text}{Style.RESET_ALL}")
            elif option_type == "separator":
                self.draw_separator(80)
            elif option_type == "empty":
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.normal_color}{option_text}{Style.RESET_ALL}")
            elif option_type == "back":
                if i == current_option:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    clean_text = option_text
                    for color_code in [self.resource_color, self.location_color, Fore.YELLOW, Fore.GREEN, Fore.RED, 
                                        Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE, Fore.LIGHTBLUE_EX,
                                        Fore.LIGHTGREEN_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTRED_EX, Fore.LIGHTMAGENTA_EX,
                                        Style.BRIGHT, Style.DIM]:
                        clean_text = clean_text.replace(color_code, '')
                    clean_text = clean_text.replace(Style.RESET_ALL, '')
                    
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.selected_color} ‚ùØ {clean_text} {Style.RESET_ALL}")
                else:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {option_text}")
            else:  # –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
                quest_color = ""
                if option_type == "active":
                    quest_color = self.action_color
                elif option_type == "completed":
                    quest_color = self.normal_color
                
                if i == current_option:
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ü–≤–µ—Ç–æ–≤
                    clean_text = option_text
                    for color_code in [self.resource_color, self.location_color, Fore.YELLOW, Fore.GREEN, Fore.RED, 
                                        Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE, Fore.LIGHTBLUE_EX,
                                        Fore.LIGHTGREEN_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTRED_EX, Fore.LIGHTMAGENTA_EX,
                                        Style.BRIGHT, Style.DIM]:
                        clean_text = clean_text.replace(color_code, '')
                    clean_text = clean_text.replace(Style.RESET_ALL, '')
                    
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.selected_color} ‚ùØ {clean_text} {Style.RESET_ALL}")
                else:
                    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}   {quest_color}{option_text}{Style.RESET_ALL}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.draw_separator(80)
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚Üë‚Üì –¥–ª—è –≤—ã–±–æ—Ä–∞, Enter –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π, T –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, Esc –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        self.draw_bottom_box(80)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥
        key = self.get_key()
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É
        if key in ['w', 'W', 'UP']:
            current_option -= 1
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            while True:
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
                if current_option < 0:
                    current_option = len(options) - 1
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –æ–ø—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º/—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º/–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if options[current_option][0] not in ["header", "separator", "empty"]:
                    break
                
                # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–≤–µ—Ä—Ö
                current_option -= 1
            
        elif key in ['s', 'S', 'DOWN']:
            current_option += 1
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            while True:
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                if current_option >= len(options):
                    current_option = 0
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –æ–ø—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º/—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º/–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if options[current_option][0] not in ["header", "separator", "empty"]:
                    break
                
                # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–Ω–∏–∑
                current_option += 1
        
        elif key in ['\r', '\n', 'ENTER']:
            option_type = options[current_option][0]
            
            if option_type == "back":
                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤
                
            elif option_type in ["active", "completed"]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫–≤–µ—Å—Ç–µ
                quest = options[current_option][2]
                show_quest_details(self, quest)
                
        elif key in ['t', 'T']:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
            option_type = options[current_option][0]
            if option_type == "active":
                quest = options[current_option][2]
                if self.game.tracked_quest_id == quest.id:
                    # –û—Ç–º–µ–Ω—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                    self.game.untrack_quest()
                else:
                    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                    self.game.track_quest(quest.id)
                
        elif key in ['\x1b', 'q', 'Q', 'ESC']:
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ESC

def show_quest_details(self, quest):
    from src.ui.GameMenu import BOX_CHARS, ICONS
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–µ"""
    self.clear_screen()
    self.draw_box(80, f"–ö–í–ï–°–¢: {quest.name}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}–°—Ç–∞—Ç—É—Å:{Style.RESET_ALL} {quest.get_status_text()}")
    
    if quest.giver_id:
        npc = self.game.get_npc(quest.giver_id)
        npc_name = npc.name if npc else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}–í—ã–¥–∞–ª:{Style.RESET_ALL} {npc_name}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º NPC, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –∫–≤–µ—Å—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—ã–¥–∞–≤—à–µ–≥–æ –∫–≤–µ—Å—Ç
    if quest.taker_id and (quest.taker_id != quest.giver_id or not quest.giver_id):
        npc = self.game.get_npc(quest.taker_id)
        npc_name = npc.name if npc else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}–°–¥–∞—Ç—å:{Style.RESET_ALL} {Fore.YELLOW}{npc_name}{Style.RESET_ALL}")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
    if quest.description:
        self.draw_separator(80)
        formatted_description = self.wrap_text(quest.description, 70)
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {formatted_description}")
    
    # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤)
    if quest.status == quest.STATUS_IN_PROGRESS:
        self.draw_separator(80)
        
        current_stage = quest.get_current_stage()
        if current_stage:
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:{Style.RESET_ALL}")
            progress_lines = quest.get_progress_text(self.game).split('\n')
            for line in progress_lines:
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {line}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ –∫–≤–µ—Å—Ç –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
            if quest.is_ready_to_complete() and quest.taker_id:
                npc = self.game.get_npc(quest.taker_id)
                npc_name = npc.name if npc else quest.taker_id
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–æ–∫–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ ID
                location_id = npc.location_id if npc else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è"
                location = self.game.get_location(location_id)
                location_name = location.name if location else location_id
                
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL}")
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.GREEN}‚úì –ö–≤–µ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é!{Style.RESET_ALL}")
                print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {Fore.GREEN}–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å {npc_name} –≤ –ª–æ–∫–∞—Ü–∏–∏ {location_name}{Style.RESET_ALL}")
    
    # –ù–∞–≥—Ä–∞–¥—ã
    self.draw_separator(80)
    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} {self.highlight_color}–ù–∞–≥—Ä–∞–¥—ã:{Style.RESET_ALL}")
    
    if quest.rewards["experience"] > 0:
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} - {Fore.YELLOW}–û–ø—ã—Ç:{Style.RESET_ALL} {quest.rewards['experience']}")
    
    if quest.rewards["money"] > 0:
        print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} - {Fore.YELLOW}–ú–æ–Ω–µ—Ç—ã:{Style.RESET_ALL} {quest.rewards['money']}")
    
    if quest.rewards["items"]:
        for item_id, count in quest.rewards["items"].items():
            item_data = self.game.get_item(item_id)
            item_name = item_data.get("name", item_id) if item_data else item_id
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} - {Fore.YELLOW}–ü—Ä–µ–¥–º–µ—Ç:{Style.RESET_ALL} {item_name} x{count}")
    
    if quest.rewards["skills"]:
        for skill_id, exp_amount in quest.rewards["skills"].items():
            skill = self.player.skill_system.get_skill(skill_id)
            skill_name = skill.name if skill else skill_id
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} - {Fore.YELLOW}–û–ø—ã—Ç –Ω–∞–≤—ã–∫–∞ {skill_name}:{Style.RESET_ALL} {exp_amount}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∂–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
    self.draw_separator(80)
    
    if quest.status == quest.STATUS_IN_PROGRESS:
        if self.game.tracked_quest_id == quest.id:
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} [T] - –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞")
        else:
            print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} [T] - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–≤–µ—Å—Ç")
    
    print(f"{self.title_color}{BOX_CHARS['v_line']}{Style.RESET_ALL} –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")
    self.draw_bottom_box(80)
    
    # –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
    key = self.get_key()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è T –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if key in ['t', 'T'] and quest.status == quest.STATUS_IN_PROGRESS:
        if self.game.tracked_quest_id == quest.id:
            self.game.untrack_quest()
        else:
            self.game.track_quest(quest.id)
    # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∞–≤–∏—à–∏ ESC
    elif key in ['\x1b', 'q', 'Q', 'ESC']:
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–≤–µ—Å—Ç–∞