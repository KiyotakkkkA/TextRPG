"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞–≤—ã–∫–æ–≤ –∏ –≥—Ä—É–ø–ø –Ω–∞–≤—ã–∫–æ–≤.
"""

import os
import importlib
import inspect
import json
from typing import Dict, Any, List, Type, Optional
from src.loaders.SimpleLoader import SimpleLoader
from src.models.SimpleSkill import SimpleSkill
from src.models.skills.SkillGroup import SkillGroup
from src.utils.Logger import Logger

class SkillsLoader(SimpleLoader):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –∏ –≥—Ä—É–ø–ø –Ω–∞–≤—ã–∫–æ–≤.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –∏–∑ Python-—Ñ–∞–π–ª–æ–≤ –∏ –≥—Ä—É–ø–ø—ã –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤.
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞–≤—ã–∫–æ–≤.
        """
        self.logger = Logger()
        self.skills = {}  # –°–ª–æ–≤–∞—Ä—å –Ω–∞–≤—ã–∫–æ–≤: id -> –æ–±—ä–µ–∫—Ç –Ω–∞–≤—ã–∫–∞
        self.groups = {}  # –°–ª–æ–≤–∞—Ä—å –≥—Ä—É–ø–ø: id -> –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –∏ –≥—Ä—É–ø–ø
        self.skills_dir = os.path.join(os.getcwd(), "src", "models", "skills")
        self.groups_data_dir = os.path.join(os.getcwd(), "src", "models", "skills", "data")
        
    def load(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏ –≥—Ä—É–ø–ø—ã –Ω–∞–≤—ã–∫–æ–≤.
        """
        self.logger.info("SkillsLoader: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤—ã–∫–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –Ω–∞–≤—ã–∫–æ–≤
        self._load_skill_groups()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ Python-—Ñ–∞–π–ª–æ–≤
        self._load_skills_from_modules()
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏
        self._link_skills_to_groups()
        
        self.logger.info(f"SkillsLoader: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.skills)} –Ω–∞–≤—ã–∫–æ–≤ –∏ {len(self.groups)} –≥—Ä—É–ø–ø –Ω–∞–≤—ã–∫–æ–≤")
        
    def _load_skill_groups(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥—Ä—É–ø–ø—ã –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤.
        """
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–∞–≤—ã–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–∞—Ö
        default_groups = [
            {"id": "combat", "name": "–ë–æ–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏", "description": "–ù–∞–≤—ã–∫–∏ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π –∏ –±–∏—Ç–≤", "icon": "‚öîÔ∏è", "order": 1},
            {"id": "magic", "name": "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", "description": "–ù–∞–≤—ã–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞–≥–∏–∏", "icon": "üîÆ", "order": 2},
            {"id": "handcrafting", "name": "–†–µ–º–µ—Å–ª–æ", "description": "–ù–∞–≤—ã–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", "icon": "üî®", "order": 3},
            {"id": "survival", "name": "–í—ã–∂–∏–≤–∞–Ω–∏–µ", "description": "–ù–∞–≤—ã–∫–∏ –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ", "icon": "üèïÔ∏è", "order": 4},
            {"id": "learning", "name": "–û–±—É—á–∞–µ–º–æ—Å—Ç—å", "description": "–ù–∞–≤—ã–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞", "icon": "üìö", "order": 5},
            {"id": "social", "name": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏", "description": "–ù–∞–≤—ã–∫–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏", "icon": "üë•", "order": 6},
            {"id": "misc", "name": "–†–∞–∑–Ω–æ–µ", "description": "–†–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–≤—ã–∫–∏", "icon": "üîÑ", "order": 7}
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        for group_data in default_groups:
            group = SkillGroup()
            for key, value in group_data.items():
                setattr(group, key, value)
            self.groups[group.id] = group
            
        # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
        if os.path.exists(self.groups_data_dir):
            for filename in os.listdir(self.groups_data_dir):
                if filename.endswith(".json"):
                    try:
                        with open(os.path.join(self.groups_data_dir, filename), 'r', encoding='utf-8') as f:
                            group_data = json.load(f)
                            group = SkillGroup.from_dict(group_data)
                            self.groups[group.id] = group
                    except Exception as e:
                        self.logger.error(f"SkillsLoader: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø—ã –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ {filename}: {str(e)}")
    
    def _load_skills_from_modules(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –∏–∑ Python-–º–æ–¥—É–ª–µ–π.
        """
        if not os.path.exists(self.skills_dir):
            self.logger.warning(f"SkillsLoader: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {self.skills_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Python-—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–≤—ã–∫–æ–≤, –∏—Å–∫–ª—é—á–∞—è __init__.py –∏ SkillGroup.py
        python_files = [f for f in os.listdir(self.skills_dir) 
                      if f.endswith(".py") and f != "__init__.py" and f != "SkillGroup.py"]
        
        for filename in python_files:
            module_name = filename[:-3]  # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .py
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –º–æ–¥—É–ª—è
                full_module_name = f"src.models.skills.{module_name}"
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                module = importlib.import_module(full_module_name)
                
                # –ò—â–µ–º –≤ –º–æ–¥—É–ª–µ –∫–ª–∞—Å—Å—ã, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–µ SimpleSkill
                for name, obj in inspect.getmembers(module, inspect.isclass):
                    if issubclass(obj, SimpleSkill) and obj != SimpleSkill:
                        try:
                            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–≤—ã–∫–∞
                            skill = obj()
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                            self.skills[skill.id] = skill
                        except Exception as e:
                            self.logger.error(f"SkillsLoader: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞ {name}: {str(e)}")
                            
            except Exception as e:
                self.logger.error(f"SkillsLoader: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {module_name}: {str(e)}")
    
    def _link_skills_to_groups(self):
        """
        –°–≤—è–∑—ã–≤–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏.
        """
        for skill_id, skill in self.skills.items():
            group_id = skill.group_id
            
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫ –≤ –≥—Ä—É–ø–ø—É
            if group_id in self.groups:
                self.groups[group_id].add_skill(skill_id)
            else:
                # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ "–†–∞–∑–Ω–æ–µ"
                self.groups["misc"].add_skill(skill_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º group_id –Ω–∞–≤—ã–∫–∞
                skill.group_id = "misc"
    
    def get_skill(self, skill_id: str) -> Optional[SimpleSkill]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–≤—ã–∫ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
        
        Args:
            skill_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–≤—ã–∫–∞
            
        Returns:
            Optional[SimpleSkill]: –û–±—ä–µ–∫—Ç –Ω–∞–≤—ã–∫–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return self.skills.get(skill_id)
    
    def get_all_skills(self) -> Dict[str, SimpleSkill]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤.
        
        Returns:
            Dict[str, SimpleSkill]: –°–ª–æ–≤–∞—Ä—å –Ω–∞–≤—ã–∫–æ–≤ (id -> –æ–±—ä–µ–∫—Ç)
        """
        return self.skills
    
    def get_group(self, group_id: str) -> Optional[SkillGroup]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–ø–ø—É –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –µ–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
        
        Args:
            group_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã
            
        Returns:
            Optional[SkillGroup]: –û–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã –∏–ª–∏ None, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        return self.groups.get(group_id)
    
    def get_all_groups(self) -> Dict[str, SkillGroup]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –≥—Ä—É–ø–ø –Ω–∞–≤—ã–∫–æ–≤.
        
        Returns:
            Dict[str, SkillGroup]: –°–ª–æ–≤–∞—Ä—å –≥—Ä—É–ø–ø (id -> –æ–±—ä–µ–∫—Ç)
        """
        return self.groups
    
    def get_skills_by_group(self, group_id: str) -> List[SimpleSkill]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.
        
        Args:
            group_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã
            
        Returns:
            List[SimpleSkill]: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞–≤—ã–∫–æ–≤
        """
        group = self.groups.get(group_id)
        if not group:
            return []
            
        skills = []
        for skill_id in group.get_skills_ids():
            skill = self.skills.get(skill_id)
            if skill:
                skills.append(skill)
                
        return skills
    
    def get_ordered_groups(self) -> List[SkillGroup]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –Ω–∞–≤—ã–∫–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ø–æ—Ä—è–¥–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Returns:
            List[SkillGroup]: –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        """
        return sorted(self.groups.values(), key=lambda g: g.order)
        
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞–≤—ã–∫–∞–º
    def __getitem__(self, key):
        return self.skills[key]
        
    def __setitem__(self, key, value):
        self.skills[key] = value
        
    def __contains__(self, key):
        return key in self.skills
        
    def __len__(self):
        return len(self.skills)
        
    def keys(self):
        return self.skills.keys()
        
    def values(self):
        return self.skills.values()
        
    def items(self):
        return self.skills.items() 